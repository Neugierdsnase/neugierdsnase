import{S as kk,i as fk,s as hk,D as Qc,x as dk,y as yk,z as wk,A as mk,B as lr,r as bk,p as vk,C as Ek,P as cr,e as l,t,k as u,c,a as i,h as e,d as n,m as r,b as k,g as p,F as a,n as _k}from"../../chunks/index-a4305d86.js";import{B as xk}from"../../chunks/BlogPostLayout-2987b3f1.js";import"../../chunks/Article-1fb784f3.js";import"../../chunks/PageHeading-8fc8889e.js";import"../../chunks/index-e10c4c74.js";function gk(Ns){let f,b,G,q,h,S,os,Ms,Je,at,H,Xe,ps,so,no,ls,ao,to,tt,Ws,eo,et,js,oo,ot,Vs,po,pt,Gs,On,lo,lt,qs,co,ct,cs,ur=`<code class="language-py"><span class="token keyword">import</span> pyxel

SCREEN_WIDTH <span class="token operator">=</span> <span class="token number">255</span>
SCREEN_HEIGHT <span class="token operator">=</span> <span class="token number">120</span>

<span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">:</span>
  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    pyxel<span class="token punctuation">.</span>init<span class="token punctuation">(</span>SCREEN_WIDTH<span class="token punctuation">,</span> SCREEN_HEIGHT<span class="token punctuation">)</span>
    pyxel<span class="token punctuation">.</span>run<span class="token punctuation">(</span>self<span class="token punctuation">.</span>update<span class="token punctuation">,</span> self<span class="token punctuation">.</span>draw<span class="token punctuation">)</span>

App<span class="token punctuation">(</span><span class="token punctuation">)</span></code>`,it,zs,io,ut,Y,uo,Rn,ro,ko,rt,F,fo,Zn,ho,yo,kt,is,rr=`<code class="language-py"><span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">if</span> pyxel<span class="token punctuation">.</span>btnp<span class="token punctuation">(</span>pyxel<span class="token punctuation">.</span>KEY_Q<span class="token punctuation">)</span><span class="token punctuation">:</span>
    pyxel<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">draw</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
  pyxel<span class="token punctuation">.</span>cls<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></code>`,ft,y,wo,Nn,mo,bo,Mn,vo,Eo,Wn,_o,xo,jn,go,Bo,Ys,Io,Lo,ht,Fs,To,dt,Ks,So,yt,Qs,Ao,wt,us,kr=`<code class="language-py"><span class="token keyword">class</span> <span class="token class-name">Ball</span><span class="token punctuation">:</span>
  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> position<span class="token punctuation">,</span> velocity<span class="token punctuation">)</span><span class="token punctuation">:</span>
    self<span class="token punctuation">.</span>position <span class="token operator">=</span> position
    self<span class="token punctuation">.</span>velocity <span class="token operator">=</span> velocity</code>`,mt,v,Po,Vn,Ho,Co,Gn,Do,Oo,qn,Ro,Zo,zn,No,Mo,bt,rs,fr=`<code class="language-py"><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
  pyxel<span class="token punctuation">.</span>init<span class="token punctuation">(</span>SCREEN_WIDTH<span class="token punctuation">,</span> SCREEN_HEIGHT<span class="token punctuation">)</span>
  self<span class="token punctuation">.</span>ball <span class="token operator">=</span> Ball<span class="token punctuation">(</span>PLACEHOLDER_POSITION<span class="token punctuation">,</span> PLACEHOLDER_VELOCITY<span class="token punctuation">)</span>
  pyxel<span class="token punctuation">.</span>run<span class="token punctuation">(</span>self<span class="token punctuation">.</span>update<span class="token punctuation">,</span> self<span class="token punctuation">.</span>draw<span class="token punctuation">)</span></code>`,vt,K,Wo,Yn,jo,Vo,Et,ks,hr=`<code class="language-py"><span class="token keyword">def</span> <span class="token function">draw</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
  pyxel<span class="token punctuation">.</span>cls<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
  pyxel<span class="token punctuation">.</span>circ<span class="token punctuation">(</span>self<span class="token punctuation">.</span>ball<span class="token punctuation">.</span>position<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span></code>`,_t,C,Go,Fn,qo,zo,Kn,Yo,Fo,xt,$s,Ko,gt,Us,Qo,Bt,Js,$o,It,Xs,Uo,Lt,sn,Jo,Tt,fs,dr=`<code class="language-py"><span class="token keyword">class</span> <span class="token class-name">Vec2</span><span class="token punctuation">:</span>
  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
    self<span class="token punctuation">.</span>x <span class="token operator">=</span> x
    self<span class="token punctuation">.</span>y <span class="token operator">=</span> y</code>`,St,Q,Xo,Qn,sp,np,At,hs,yr=`<code class="language-py"><span class="token keyword">class</span> <span class="token class-name">Ball</span><span class="token punctuation">:</span>
  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> px<span class="token punctuation">,</span> py<span class="token punctuation">,</span> vx<span class="token punctuation">,</span> vy<span class="token punctuation">)</span><span class="token punctuation">:</span>
    self<span class="token punctuation">.</span>position <span class="token operator">=</span> Vec2<span class="token punctuation">(</span>px<span class="token punctuation">,</span> py<span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>velocity <span class="token operator">=</span> Vec2<span class="token punctuation">(</span>vx<span class="token punctuation">,</span> vy<span class="token punctuation">)</span></code>`,Pt,d,ap,$n,tp,ep,Un,op,pp,Jn,lp,cp,Xn,ip,up,sa,rp,kp,na,fp,hp,Ht,ds,wr=`<code class="language-py"><span class="token keyword">def</span> draw<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> 
  pyxel<span class="token punctuation">.</span>cls<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> 
  pyxel<span class="token punctuation">.</span>circ<span class="token punctuation">(</span>
    self<span class="token punctuation">.</span>ball<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x<span class="token punctuation">,</span>
    self<span class="token punctuation">.</span>ball<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y<span class="token punctuation">,</span>
    <span class="token number">2</span><span class="token punctuation">,</span> 
    <span class="token number">7</span>
  <span class="token punctuation">)</span></code>`,Ct,w,dp,aa,yp,wp,ta,mp,bp,ea,vp,Ep,oa,_p,xp,pa,gp,Bp,Dt,nn,Ip,Ot,D,Lp,la,Tp,Sp,ca,Ap,Pp,Rt,ys,mr=`<code class="language-py"><span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
  self<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x <span class="token operator">+=</span> self<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>x
  self<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">+=</span> self<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>y</code>`,Zt,E,Hp,ia,Cp,Dp,ua,Op,Rp,ra,Zp,Np,ka,Mp,Wp,Nt,ws,br=`<code class="language-py"><span class="token keyword">if</span> self<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">>=</span> SCREEN_HEIGHT <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">:</span>
  self<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token operator">-</span>self<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>y

<span class="token keyword">if</span> self<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">:</span>
  self<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token operator">-</span>self<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>y</code>`,Mt,$,jp,fa,Vp,Gp,Wt,an,qp,jt,U,zp,ha,Yp,Fp,Vt,ms,vr=`<code class="language-py"><span class="token keyword">class</span> <span class="token class-name">Ball</span><span class="token punctuation">:</span>
  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> px<span class="token punctuation">,</span> py<span class="token punctuation">,</span> vx<span class="token punctuation">,</span> vy<span class="token punctuation">)</span><span class="token punctuation">:</span>
    self<span class="token punctuation">.</span>position <span class="token operator">=</span> Vec2<span class="token punctuation">(</span>px<span class="token punctuation">,</span> py<span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>velocity <span class="token operator">=</span> Vec2<span class="token punctuation">(</span>vx<span class="token punctuation">,</span> vy<span class="token punctuation">)</span>

  <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    self<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x <span class="token operator">+=</span> self<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>x
    self<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">+=</span> self<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>y

    <span class="token keyword">if</span> self<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">>=</span> SCREEN_HEIGHT <span class="token operator">-</span> BALL_SIZE<span class="token punctuation">:</span>
      self<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token operator">-</span>self<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>y

    <span class="token keyword">if</span> self<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">&lt;=</span> BALL_SIZE<span class="token punctuation">:</span>
      self<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token operator">-</span>self<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>y</code>`,Gt,tn,A,Kp,da,Qp,$p,ya,Up,Jp,wa,Xp,sl,qt,en,nl,zt,on,al,Yt,pn,tl,Ft,bs,Er=`<code class="language-py"><span class="token keyword">class</span> <span class="token class-name">Vec2_norm</span><span class="token punctuation">:</span>
  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
    self<span class="token punctuation">.</span>magnitude <span class="token operator">=</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>x <span class="token operator">*</span> x <span class="token operator">+</span> y <span class="token operator">*</span> y<span class="token punctuation">)</span> <span class="token comment"># this is how you get the magnitude (length) of a vector</span>
    self<span class="token punctuation">.</span>x <span class="token operator">=</span> x <span class="token operator">/</span> self<span class="token punctuation">.</span>magnitude <span class="token operator">*</span> BALL_SPEED
    self<span class="token punctuation">.</span>y <span class="token operator">=</span> y <span class="token operator">/</span> self<span class="token punctuation">.</span>magnitude <span class="token operator">*</span> BALL_SPEED</code>`,Kt,m,el,ma,ol,pl,ba,ll,cl,va,il,ul,Ea,rl,kl,_a,fl,hl,Qt,ln,dl,$t,vs,_r=`<code class="language-py"><span class="token keyword">import</span> math
<span class="token keyword">import</span> pyxel

BALL_SIZE <span class="token operator">=</span> <span class="token number">2</span>
BALL_SPEED <span class="token operator">=</span> <span class="token number">2</span>
SCREEN_WIDTH <span class="token operator">=</span> <span class="token number">255</span>
SCREEN_HEIGHT <span class="token operator">=</span> <span class="token number">120</span>

<span class="token keyword">class</span> <span class="token class-name">Vec2</span><span class="token punctuation">:</span>
  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
    self<span class="token punctuation">.</span>x <span class="token operator">=</span> x
    self<span class="token punctuation">.</span>y <span class="token operator">=</span> y

<span class="token keyword">class</span> <span class="token class-name">Vec2_norm</span><span class="token punctuation">:</span>
  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
    self<span class="token punctuation">.</span>magnitude <span class="token operator">=</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>x <span class="token operator">*</span> x <span class="token operator">+</span> y <span class="token operator">*</span> y<span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>x <span class="token operator">=</span> x <span class="token operator">/</span> self<span class="token punctuation">.</span>magnitude <span class="token operator">*</span> BALL_SPEED
    self<span class="token punctuation">.</span>y <span class="token operator">=</span> y <span class="token operator">/</span> self<span class="token punctuation">.</span>magnitude <span class="token operator">*</span> BALL_SPEED

<span class="token keyword">class</span> <span class="token class-name">Ball</span><span class="token punctuation">:</span>
  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> px<span class="token punctuation">,</span> py<span class="token punctuation">,</span> vx<span class="token punctuation">,</span> vy<span class="token punctuation">)</span><span class="token punctuation">:</span>
    self<span class="token punctuation">.</span>position <span class="token operator">=</span> Vec2<span class="token punctuation">(</span>px<span class="token punctuation">,</span> py<span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>velocity <span class="token operator">=</span> Vec2_norm<span class="token punctuation">(</span>vx<span class="token punctuation">,</span> vy<span class="token punctuation">)</span>

  <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    self<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x <span class="token operator">+=</span> self<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>x
    self<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">+=</span> self<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>y

    <span class="token keyword">if</span> self<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">>=</span> SCREEN_HEIGHT <span class="token operator">-</span> BALL_SIZE<span class="token punctuation">:</span>
      self<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token operator">-</span>self<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>y

    <span class="token keyword">if</span> self<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">&lt;=</span> BALL_SIZE<span class="token punctuation">:</span>
      self<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token operator">-</span>self<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>y

<span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">:</span>
  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    pyxel<span class="token punctuation">.</span>init<span class="token punctuation">(</span>SCREEN_WIDTH<span class="token punctuation">,</span> SCREEN_HEIGHT<span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>ball <span class="token operator">=</span> Ball<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
    pyxel<span class="token punctuation">.</span>run<span class="token punctuation">(</span>self<span class="token punctuation">.</span>update<span class="token punctuation">,</span> self<span class="token punctuation">.</span>draw<span class="token punctuation">)</span>

  <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> pyxel<span class="token punctuation">.</span>btnp<span class="token punctuation">(</span>pyxel<span class="token punctuation">.</span>KEY_Q<span class="token punctuation">)</span><span class="token punctuation">:</span>
      pyxel<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>ball<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">def</span> <span class="token function">draw</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    pyxel<span class="token punctuation">.</span>cls<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    pyxel<span class="token punctuation">.</span>circ<span class="token punctuation">(</span>
      self<span class="token punctuation">.</span>ball<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x<span class="token punctuation">,</span>
      self<span class="token punctuation">.</span>ball<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y<span class="token punctuation">,</span>
      BALL_SIZE<span class="token punctuation">,</span>
      <span class="token number">7</span>
    <span class="token punctuation">)</span>

App<span class="token punctuation">(</span><span class="token punctuation">)</span></code>`,Ut,cn,yl,Jt,un,wl,Xt,rn,xa,ml,se,Es,xr=`<code class="language-py"><span class="token keyword">class</span> <span class="token class-name">Bat</span><span class="token punctuation">:</span>
  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> px<span class="token punctuation">,</span> py<span class="token punctuation">)</span><span class="token punctuation">:</span>
    self<span class="token punctuation">.</span>position <span class="token operator">=</span> Vec2<span class="token punctuation">(</span>px<span class="token punctuation">,</span> py<span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>velocity <span class="token operator">=</span> <span class="token number">0</span></code>`,ne,kn,bl,ae,fn,ga,vl,te,_s,gr=`<code class="language-py"><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
  pyxel<span class="token punctuation">.</span>init<span class="token punctuation">(</span>SCREEN_WIDTH<span class="token punctuation">,</span> SCREEN_HEIGHT<span class="token punctuation">)</span>
  self<span class="token punctuation">.</span>ball <span class="token operator">=</span> Ball<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
  self<span class="token punctuation">.</span>bats <span class="token operator">=</span> <span class="token punctuation">[</span>Bat<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Bat<span class="token punctuation">(</span>SCREEN_WIDTH <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
  pyxel<span class="token punctuation">.</span>run<span class="token punctuation">(</span>self<span class="token punctuation">.</span>update<span class="token punctuation">,</span> self<span class="token punctuation">.</span>draw<span class="token punctuation">)</span></code>`,ee,hn,g,El,Ba,_l,xl,Ia,gl,Bl,La,Il,Ll,Ta,Tl,Sl,oe,xs,Br=`<code class="language-py"><span class="token keyword">def</span> <span class="token function">draw</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
  pyxel<span class="token punctuation">.</span>cls<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
  pyxel<span class="token punctuation">.</span>circ<span class="token punctuation">(</span>
    self<span class="token punctuation">.</span>ball<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x<span class="token punctuation">,</span>
    self<span class="token punctuation">.</span>ball<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y<span class="token punctuation">,</span>
    BALL_SIZE<span class="token punctuation">,</span>
    <span class="token number">7</span>
  <span class="token punctuation">)</span>
  <span class="token keyword">for</span> bat <span class="token keyword">in</span> self<span class="token punctuation">.</span>bats<span class="token punctuation">:</span>
    pyxel<span class="token punctuation">.</span>rect<span class="token punctuation">(</span>
      bat<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x <span class="token operator">-</span> BAT_SIZE <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token comment"># x-coordinate of top left corner</span>
      bat<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">-</span> BAT_SIZE<span class="token punctuation">,</span>     <span class="token comment"># y-coordinate of top left corner</span>
      bat<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x <span class="token operator">+</span> BAT_SIZE <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token comment"># x-coordinate of bottom right corner</span>
      bat<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">+</span> BAT_SIZE<span class="token punctuation">,</span>     <span class="token comment"># y-coordinate of bottom right corner</span>
      <span class="token number">7</span>                               <span class="token comment"># fill color</span>
    <span class="token punctuation">)</span></code>`,pe,dn,P,Al,Sa,Pl,Hl,Aa,Cl,Dl,Pa,Ol,Rl,le,gs,Ir=`<code class="language-py"><span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">if</span> pyxel<span class="token punctuation">.</span>btnp<span class="token punctuation">(</span>pyxel<span class="token punctuation">.</span>KEY_Q<span class="token punctuation">)</span><span class="token punctuation">:</span>
    pyxel<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>
  self<span class="token punctuation">.</span>ball<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">for</span> bat <span class="token keyword">in</span> self<span class="token punctuation">.</span>bats<span class="token punctuation">:</span>
    bat<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span></code>`,ce,J,Zl,Ha,Nl,Ml,ie,yn,Wl,ue,Bs,Lr=`<code class="language-py"><span class="token keyword">if</span> pyxel<span class="token punctuation">.</span>btnp<span class="token punctuation">(</span>pyxel<span class="token punctuation">.</span>KEY_W<span class="token punctuation">)</span><span class="token punctuation">:</span>
  self<span class="token punctuation">.</span>velocity <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span>

<span class="token keyword">if</span> pyxel<span class="token punctuation">.</span>btnp<span class="token punctuation">(</span>pyxel<span class="token punctuation">.</span>KEY_S<span class="token punctuation">)</span><span class="token punctuation">:</span>
  self<span class="token punctuation">.</span>velocity <span class="token operator">=</span> <span class="token number">2</span></code>`,re,wn,jl,ke,Is,Tr=`<code class="language-py"><span class="token keyword">if</span> self<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">-</span> BAT_SIZE <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
  self<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">=</span> BAT_SIZE
  self<span class="token punctuation">.</span>velocity <span class="token operator">=</span> <span class="token number">0</span>

<span class="token keyword">if</span> self<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">+</span> BAT_SIZE <span class="token operator">></span> SCREEN_HEIGHT<span class="token punctuation">:</span>
  self<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">=</span> SCREEN_HEIGHT <span class="token operator">-</span> BAT_SIZE
  self<span class="token punctuation">.</span>velocity <span class="token operator">=</span> <span class="token number">0</span></code>`,fe,Ls,Vl,Ca,Gl,he,mn,ql,de,bn,zl,ye,Ts,Sr=`<code class="language-py"><span class="token keyword">class</span> <span class="token class-name">HitBox</span><span class="token punctuation">:</span>
  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">)</span><span class="token punctuation">:</span>
    self<span class="token punctuation">.</span>x1 <span class="token operator">=</span> x1 <span class="token comment"># x-coordinate of top left corner</span>
    self<span class="token punctuation">.</span>y1 <span class="token operator">=</span> y1 <span class="token comment"># y-coordinate of top left corner</span>
    self<span class="token punctuation">.</span>x2 <span class="token operator">=</span> x2 <span class="token comment"># x-coordinate of bottom right corner</span>
    self<span class="token punctuation">.</span>y2 <span class="token operator">=</span> y2 <span class="token comment"># y-coordinate of bottom right corner</span></code>`,we,O,Yl,Da,Fl,Kl,Oa,Ql,$l,me,Ss,Ar=`<code class="language-py"><span class="token keyword">for</span> bat <span class="token keyword">in</span> self<span class="token punctuation">.</span>bats<span class="token punctuation">:</span>
  pyxel<span class="token punctuation">.</span>rect<span class="token punctuation">(</span>
    bat<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x <span class="token operator">-</span> BAT_SIZE <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token comment"># x-coordinate of top left corner</span>
    bat<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">-</span> BAT_SIZE<span class="token punctuation">,</span>     <span class="token comment"># y-coordinate of top left corner</span>
    bat<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x <span class="token operator">+</span> BAT_SIZE <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token comment"># x-coordinate of bottom right corner</span>
    bat<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">+</span> BAT_SIZE<span class="token punctuation">,</span>     <span class="token comment"># y-coordinate of bottom right corner</span>
    <span class="token number">7</span>                              <span class="token comment"># fill color</span>
  <span class="token punctuation">)</span></code>`,be,X,Ul,Ra,Jl,Xl,ve,As,Pr=`<code class="language-py"><span class="token keyword">class</span> <span class="token class-name">Bat</span><span class="token punctuation">:</span>
  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> px<span class="token punctuation">,</span> py<span class="token punctuation">)</span><span class="token punctuation">:</span>
    self<span class="token punctuation">.</span>position <span class="token operator">=</span> Vec2<span class="token punctuation">(</span>px<span class="token punctuation">,</span> py<span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>velocity <span class="token operator">=</span> <span class="token number">0</span>
    self<span class="token punctuation">.</span>hitBox <span class="token operator">=</span> HitBox<span class="token punctuation">(</span>
      self<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x <span class="token operator">-</span> BAT_SIZE <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">,</span>
      self<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">-</span> BAT_SIZE<span class="token punctuation">,</span>
      self<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x <span class="token operator">+</span> BAT_SIZE <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">,</span>
      self<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">+</span> BAT_SIZE
    <span class="token punctuation">)</span></code>`,Ee,R,sc,Za,nc,ac,Na,tc,ec,_e,Ps,Hr=`<code class="language-py"><span class="token keyword">for</span> bat <span class="token keyword">in</span> self<span class="token punctuation">.</span>bats<span class="token punctuation">:</span>
  pyxel<span class="token punctuation">.</span>rect<span class="token punctuation">(</span>
    bat<span class="token punctuation">.</span>hitBox<span class="token punctuation">.</span>x1<span class="token punctuation">,</span>
    bat<span class="token punctuation">.</span>hitBox<span class="token punctuation">.</span>y1<span class="token punctuation">,</span>
    bat<span class="token punctuation">.</span>hitBox<span class="token punctuation">.</span>x2<span class="token punctuation">,</span>
    bat<span class="token punctuation">.</span>hitBox<span class="token punctuation">.</span>y2<span class="token punctuation">,</span>
    <span class="token number">7</span>
  <span class="token punctuation">)</span></code>`,xe,vn,oc,ge,Z,pc,Ma,lc,cc,Wa,ic,uc,Be,Hs,Cr=`<code class="language-py"><span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
  self<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">+=</span> self<span class="token punctuation">.</span>velocity
  self<span class="token punctuation">.</span>hitBox <span class="token operator">=</span> HitBox<span class="token punctuation">(</span>
    self<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x <span class="token operator">-</span> BAT_SIZE <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">,</span>
    self<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">-</span> BAT_SIZE<span class="token punctuation">,</span>
    self<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x <span class="token operator">+</span> BAT_SIZE <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">,</span>
    self<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">+</span> BAT_SIZE
  <span class="token punctuation">)</span></code>`,Ie,En,rc,Le,Cs,Dr=`<code class="language-py"><span class="token keyword">for</span> bat <span class="token keyword">in</span> self<span class="token punctuation">.</span>bats<span class="token punctuation">:</span>
  bat<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>bat<span class="token punctuation">.</span>hitBox<span class="token punctuation">.</span>x1 <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>ball<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> bat<span class="token punctuation">.</span>hitBox<span class="token punctuation">.</span>x2
  <span class="token keyword">and</span> bat<span class="token punctuation">.</span>hitBox<span class="token punctuation">.</span>y1 <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>ball<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">&lt;</span> bat<span class="token punctuation">.</span>hitBox<span class="token punctuation">.</span>y2<span class="token punctuation">)</span><span class="token punctuation">:</span>
    self<span class="token punctuation">.</span>ball<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token operator">-</span>self<span class="token punctuation">.</span>ball<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>x</code>`,Te,_n,ja,kc,Se,xn,fc,Ae,_,hc,Va,dc,yc,Ga,wc,mc,qa,bc,vc,za,Ec,_c,Pe,Ds,Or=`<code class="language-py"><span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">if</span> pyxel<span class="token punctuation">.</span>btnp<span class="token punctuation">(</span>pyxel<span class="token punctuation">.</span>KEY_Q<span class="token punctuation">)</span><span class="token punctuation">:</span>
    pyxel<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>
  self<span class="token punctuation">.</span>ball<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">for</span> bat <span class="token keyword">in</span> self<span class="token punctuation">.</span>bats<span class="token punctuation">:</span>
    bat<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>bat<span class="token punctuation">.</span>hitBox<span class="token punctuation">.</span>x1 <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>ball<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> bat<span class="token punctuation">.</span>hitBox<span class="token punctuation">.</span>x2
    <span class="token keyword">and</span> bat<span class="token punctuation">.</span>hitBox<span class="token punctuation">.</span>y1 <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>ball<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">&lt;</span> bat<span class="token punctuation">.</span>hitBox<span class="token punctuation">.</span>y2<span class="token punctuation">)</span><span class="token punctuation">:</span>
      self<span class="token punctuation">.</span>ball<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token operator">-</span>self<span class="token punctuation">.</span>ball<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>x
      self<span class="token punctuation">.</span>score <span class="token operator">+=</span> <span class="token number">1</span>
  <span class="token keyword">if</span> self<span class="token punctuation">.</span>ball<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x <span class="token operator">>=</span> SCREEN_WIDTH <span class="token operator">-</span> BALL_SIZE<span class="token punctuation">:</span>
    pyxel<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> self<span class="token punctuation">.</span>ball<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x <span class="token operator">&lt;=</span> BALL_SIZE<span class="token punctuation">:</span>
    pyxel<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span></code>`,He,N,xc,Ya,gc,Bc,Fa,Ic,Lc,Ce,Os,Rr=`<code class="language-py">pyxel<span class="token punctuation">.</span>text<span class="token punctuation">(</span>
  SCREEN_WIDTH <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span>   <span class="token comment"># x-position of the text</span>
  SCREEN_HEIGHT <span class="token operator">/</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token comment"># y position of the text</span>
  <span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment"># displayed text as string</span>
  <span class="token number">7</span>                   <span class="token comment"># text color</span>
<span class="token punctuation">)</span></code>`,De,gn,Tc,Oe,Rs,Zr=`<code class="language-py"><span class="token keyword">import</span> math
<span class="token keyword">import</span> pyxel

BALL_SIZE <span class="token operator">=</span> <span class="token number">2</span>
BALL_SPEED <span class="token operator">=</span> <span class="token number">2</span>
BAT_SIZE <span class="token operator">=</span> <span class="token number">8</span>
SCREEN_WIDTH <span class="token operator">=</span> <span class="token number">255</span>
SCREEN_HEIGHT <span class="token operator">=</span> <span class="token number">120</span>

<span class="token keyword">class</span> <span class="token class-name">Vec2</span><span class="token punctuation">:</span>
  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
    self<span class="token punctuation">.</span>x <span class="token operator">=</span> x
    self<span class="token punctuation">.</span>y <span class="token operator">=</span> y

<span class="token keyword">class</span> <span class="token class-name">Vec2_norm</span><span class="token punctuation">:</span>
  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
    self<span class="token punctuation">.</span>magnitude <span class="token operator">=</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>x <span class="token operator">*</span> x <span class="token operator">+</span> y <span class="token operator">*</span> y<span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>x <span class="token operator">=</span> x <span class="token operator">/</span> self<span class="token punctuation">.</span>magnitude <span class="token operator">*</span> BALL_SPEED
    self<span class="token punctuation">.</span>y <span class="token operator">=</span> y <span class="token operator">/</span> self<span class="token punctuation">.</span>magnitude <span class="token operator">*</span> BALL_SPEED

<span class="token keyword">class</span> <span class="token class-name">HitBox</span><span class="token punctuation">:</span>
  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">)</span><span class="token punctuation">:</span>
    self<span class="token punctuation">.</span>x1 <span class="token operator">=</span> x1 <span class="token comment"># x-coordinate of top left corner</span>
    self<span class="token punctuation">.</span>y1 <span class="token operator">=</span> y1 <span class="token comment"># y-coordinate of top left corner</span>
    self<span class="token punctuation">.</span>x2 <span class="token operator">=</span> x2 <span class="token comment"># x-coordinate of bottom right corner</span>
    self<span class="token punctuation">.</span>y2 <span class="token operator">=</span> y2 <span class="token comment"># y-coordinate of bottom right corner</span>

<span class="token keyword">class</span> <span class="token class-name">Ball</span><span class="token punctuation">:</span>
  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> px<span class="token punctuation">,</span> py<span class="token punctuation">,</span> vx<span class="token punctuation">,</span> vy<span class="token punctuation">)</span><span class="token punctuation">:</span>
    self<span class="token punctuation">.</span>position <span class="token operator">=</span> Vec2<span class="token punctuation">(</span>px<span class="token punctuation">,</span> py<span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>velocity <span class="token operator">=</span> Vec2_norm<span class="token punctuation">(</span>vx<span class="token punctuation">,</span> vy<span class="token punctuation">)</span>

  <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    self<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x <span class="token operator">+=</span> self<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>x
    self<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">+=</span> self<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>y

    <span class="token keyword">if</span> self<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">>=</span> SCREEN_HEIGHT <span class="token operator">-</span> BALL_SIZE<span class="token punctuation">:</span>
      self<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token operator">-</span>self<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>y

    <span class="token keyword">if</span> self<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">&lt;=</span> BALL_SIZE<span class="token punctuation">:</span>
      self<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token operator">-</span>self<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>y

<span class="token keyword">class</span> <span class="token class-name">Bat</span><span class="token punctuation">:</span>
  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> px<span class="token punctuation">,</span> py<span class="token punctuation">)</span><span class="token punctuation">:</span>
    self<span class="token punctuation">.</span>position <span class="token operator">=</span> Vec2<span class="token punctuation">(</span>px<span class="token punctuation">,</span> py<span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>velocity <span class="token operator">=</span> <span class="token number">0</span>
    self<span class="token punctuation">.</span>hitBox <span class="token operator">=</span> HitBox<span class="token punctuation">(</span>
      self<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x <span class="token operator">-</span> BAT_SIZE <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">,</span>
      self<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">-</span> BAT_SIZE<span class="token punctuation">,</span>
      self<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x <span class="token operator">+</span> BAT_SIZE <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">,</span>
      self<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">+</span> BAT_SIZE
    <span class="token punctuation">)</span>

  <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    self<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">+=</span> self<span class="token punctuation">.</span>velocity
    self<span class="token punctuation">.</span>hitBox <span class="token operator">=</span> HitBox<span class="token punctuation">(</span>
      self<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x <span class="token operator">-</span> BAT_SIZE <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">,</span>
      self<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">-</span> BAT_SIZE<span class="token punctuation">,</span>
      self<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x <span class="token operator">+</span> BAT_SIZE <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">,</span>
      self<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">+</span> BAT_SIZE
    <span class="token punctuation">)</span>

    <span class="token keyword">if</span> pyxel<span class="token punctuation">.</span>btnp<span class="token punctuation">(</span>pyxel<span class="token punctuation">.</span>KEY_W<span class="token punctuation">)</span><span class="token punctuation">:</span>
      self<span class="token punctuation">.</span>velocity <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span>

    <span class="token keyword">if</span> pyxel<span class="token punctuation">.</span>btnp<span class="token punctuation">(</span>pyxel<span class="token punctuation">.</span>KEY_S<span class="token punctuation">)</span><span class="token punctuation">:</span>
      self<span class="token punctuation">.</span>velocity <span class="token operator">=</span> <span class="token number">2</span>

    <span class="token keyword">if</span> self<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">-</span> BAT_SIZE <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
      self<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">=</span> BAT_SIZE
      self<span class="token punctuation">.</span>velocity <span class="token operator">=</span> <span class="token number">0</span>

    <span class="token keyword">if</span> self<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">+</span> BAT_SIZE <span class="token operator">></span> SCREEN_HEIGHT<span class="token punctuation">:</span>
      self<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">=</span> SCREEN_HEIGHT <span class="token operator">-</span> BAT_SIZE
      self<span class="token punctuation">.</span>velocity <span class="token operator">=</span> <span class="token number">0</span>

<span class="token keyword">class</span> <span class="token class-name">App</span><span class="token punctuation">:</span>
  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    pyxel<span class="token punctuation">.</span>init<span class="token punctuation">(</span>SCREEN_WIDTH<span class="token punctuation">,</span> SCREEN_HEIGHT<span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>ball <span class="token operator">=</span> Ball<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>bats <span class="token operator">=</span> <span class="token punctuation">[</span>Bat<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Bat<span class="token punctuation">(</span>SCREEN_WIDTH <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    self<span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">0</span>
    pyxel<span class="token punctuation">.</span>run<span class="token punctuation">(</span>self<span class="token punctuation">.</span>update<span class="token punctuation">,</span> self<span class="token punctuation">.</span>draw<span class="token punctuation">)</span>

  <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> pyxel<span class="token punctuation">.</span>btnp<span class="token punctuation">(</span>pyxel<span class="token punctuation">.</span>KEY_Q<span class="token punctuation">)</span><span class="token punctuation">:</span>
      pyxel<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>ball<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> bat <span class="token keyword">in</span> self<span class="token punctuation">.</span>bats<span class="token punctuation">:</span>
      bat<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>bat<span class="token punctuation">.</span>hitBox<span class="token punctuation">.</span>x1 <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>ball<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> bat<span class="token punctuation">.</span>hitBox<span class="token punctuation">.</span>x2
      <span class="token keyword">and</span> bat<span class="token punctuation">.</span>hitBox<span class="token punctuation">.</span>y1 <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>ball<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">&lt;</span> bat<span class="token punctuation">.</span>hitBox<span class="token punctuation">.</span>y2<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>ball<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token operator">-</span>self<span class="token punctuation">.</span>ball<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>x
        self<span class="token punctuation">.</span>score <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token keyword">if</span> self<span class="token punctuation">.</span>ball<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x <span class="token operator">>=</span> SCREEN_WIDTH <span class="token operator">-</span> BALL_SIZE<span class="token punctuation">:</span>
      pyxel<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> self<span class="token punctuation">.</span>ball<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x <span class="token operator">&lt;=</span> BALL_SIZE<span class="token punctuation">:</span>
      pyxel<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">def</span> <span class="token function">draw</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    pyxel<span class="token punctuation">.</span>cls<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    pyxel<span class="token punctuation">.</span>circ<span class="token punctuation">(</span>
      self<span class="token punctuation">.</span>ball<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x<span class="token punctuation">,</span>
      self<span class="token punctuation">.</span>ball<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y<span class="token punctuation">,</span>
      BALL_SIZE<span class="token punctuation">,</span>
      <span class="token number">7</span>
    <span class="token punctuation">)</span>
    <span class="token keyword">for</span> bat <span class="token keyword">in</span> self<span class="token punctuation">.</span>bats<span class="token punctuation">:</span>
      pyxel<span class="token punctuation">.</span>rect<span class="token punctuation">(</span>
        bat<span class="token punctuation">.</span>hitBox<span class="token punctuation">.</span>x1<span class="token punctuation">,</span>
        bat<span class="token punctuation">.</span>hitBox<span class="token punctuation">.</span>y1<span class="token punctuation">,</span>
        bat<span class="token punctuation">.</span>hitBox<span class="token punctuation">.</span>x2<span class="token punctuation">,</span>
        bat<span class="token punctuation">.</span>hitBox<span class="token punctuation">.</span>y2<span class="token punctuation">,</span>
        <span class="token number">7</span>
      <span class="token punctuation">)</span>
    pyxel<span class="token punctuation">.</span>text<span class="token punctuation">(</span>
      SCREEN_WIDTH <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span>
      SCREEN_HEIGHT <span class="token operator">/</span> <span class="token number">12</span><span class="token punctuation">,</span>
      <span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token number">7</span>
    <span class="token punctuation">)</span>

App<span class="token punctuation">(</span><span class="token punctuation">)</span></code>`,Re,Bn,Sc,Ze,In,Ac,Ne,B,ss,Pc,Ka,Hc,Cc,Qa,$a,Dc,Oc,z,Rc,Ua,Zc,Nc,Ja,Mc,Wc,jc,Xa,Vc,Gc,st,qc,Me,We,je,ns,zc,Zs,Yc,Fc;return{c(){f=l("p"),b=l("em"),G=t("This post has been ported from the old blog and slightly edited on the 13"),q=l("sup"),h=t("th"),S=t(" of May 2022."),os=u(),Ms=l("p"),Je=t("Making games is one of the coolest things you can do with self-taught programming skills. You have complete creative freedom, you don\u2019t have to have a unique and marketable idea and you\u2019re not potentially putting anyone in danger by messing up."),at=u(),H=l("p"),Xe=t("While there are a lot of great game engines out there (my favorite being "),ps=l("a"),so=t("Godot"),no=t("), I recently came across an awesome project on GitHub named "),ls=l("a"),ao=t("Pyxel"),to=t(". It is a game engine aiming to enable a quick and easy way to develop games in a retro style."),tt=u(),Ws=l("p"),eo=t("I have played around with it a little and I was having such a good time playing around with it, that I thought I would write up a small little tutorial about how I coded a quick version of \u201CPong\u201D in just shy of 130 lines of Python."),et=u(),js=l("h2"),oo=t("What we\u2019re building"),ot=u(),Vs=l("p"),po=t("So this version of Pong is a single-player version where one player controls both bats and gets a point every time they hit the ball. Easy enough? Let\u2019s do it."),pt=u(),Gs=l("p"),On=l("em"),lo=t("(Screenshot lost during porting, trying to recover.)"),lt=u(),qs=l("h2"),co=t("Setting up the basics"),ct=u(),cs=l("pre"),it=u(),zs=l("p"),io=t("So here we are just wrapping our app in its own class, using Pyxel\u2019s built-in methods to initialize the screen and run the game."),ut=u(),Y=l("p"),uo=t("Pyxel\u2019s "),Rn=l("code"),ro=t("run()"),ko=t("-method takes in two functions as arguments, one that will update the game before every frame and one that will redraw the screen after the changes have been calculated, which I have named accordingly."),rt=u(),F=l("p"),fo=t("So let\u2019s write those methods inside the "),Zn=l("code"),ho=t("App"),yo=t(":"),kt=u(),is=l("pre"),ft=u(),y=l("p"),wo=t("Here the "),Nn=l("code"),mo=t("update()"),bo=t("-method does nothing more - for now -, but to listen for a button press of the \u201CQ\u201D-key and quit the program, when it receives "),Mn=l("code"),vo=t("True"),Eo=t(". The "),Wn=l("code"),_o=t("draw()"),xo=t("-method uses the built-in "),jn=l("code"),go=t("cls()"),Bo=t("-method to clear the screen using the color passed to it (in this case, 0 represents black, Pyxel exposes an enumerated color palette of 16 colors you can view "),Ys=l("a"),Io=t("in their docs"),Lo=t(")."),ht=u(),Fs=l("p"),To=t("Hooray! If we run this script, we should get a black window that does absolutely nothing. Not that exciting, however, you can check if everything is put together correctly by pressing the \u201CQ\u201D-key. If the window closes, everything works as expected."),dt=u(),Ks=l("h2"),So=t("Balling"),yt=u(),Qs=l("p"),Ao=t("Arguably the most important game object in Pong is the ball. Let\u2019s write a class for our ball."),wt=u(),us=l("pre"),mt=u(),v=l("p"),Po=t("The ball doesn\u2019t really need any other properties than a position to define where it is and a velocity to define where it is going. So far so good. Let\u2019s make sure our "),Vn=l("code"),Ho=t("App"),Co=t(" knows about our "),Gn=l("code"),Do=t("Ball"),Oo=t(": For this purpose we are going to initialize an instance of the "),qn=l("code"),Ro=t("Ball"),Zo=t(", right when the "),zn=l("code"),No=t("App"),Mo=t(" loads, like so:"),bt=u(),rs=l("pre"),vt=u(),K=l("p"),Wo=t("and in the "),Yn=l("code"),jo=t("draw()"),Vo=t(" method, we will make sure a circle is drawn to represent the ball:"),Et=u(),ks=l("pre"),_t=u(),C=l("p"),Go=t("Here, 2 is the radius of the circle (aka our "),Fn=l("code"),qo=t("Ball"),zo=t(") and 7 is the color in which the ball is drawn. Hold on though, Pyxel\u2019s "),Kn=l("code"),Yo=t("circ()"),Fo=t(" method needs two positional inputs, one for the x-axis (horizontal) and one for the y-axis (vertical). Let\u2019s get onto that."),xt=u(),$s=l("h2"),Ko=t("Position and Velocity"),gt=u(),Us=l("p"),Qo=t("On a two-dimensional playing field, you will generally need two values to define the position of an object, one for each dimension (axis)."),Bt=u(),Js=l("p"),$o=t("This is also true for the velocity, you need two values to know in which direction the object is moving, however, the fact that you probably also want to keep control over the speed of the object, makes this a little trickier, so let\u2019s focus on the position for now."),It=u(),Xs=l("h3"),Uo=t("Position"),Lt=u(),sn=l("p"),Jo=t("Since we will have to manage the position of multiple objects in this project, it makes sense to write a class for those 2D vectors:"),Tt=u(),fs=l("pre"),St=u(),Q=l("p"),Xo=t("Easy enough. Let\u2019s apply this to our "),Qn=l("code"),sp=t("Ball"),np=t(":"),At=u(),hs=l("pre"),Pt=u(),d=l("p"),ap=t("Now, our Ball gets initialized with four values: an "),$n=l("code"),tp=t("x"),ep=t(" and a "),Un=l("code"),op=t("y"),pp=t(" value for each the position and the velocity. Those values are then swiftly turned into "),Jn=l("code"),lp=t("Vec2"),cp=t("s, so we can easily access the values, i.e. via "),Xn=l("code"),ip=t("any_ball.position.x"),up=t(". Let\u2019s make use of that in our "),sa=l("code"),rp=t("App"),kp=t("\u2019s "),na=l("code"),fp=t("draw() "),hp=t("method:"),Ht=u(),ds=l("pre"),Ct=u(),w=l("p"),dp=t("Now let\u2019s properly initiate the "),aa=l("code"),yp=t("Ball"),wp=t(" in our "),ta=l("code"),mp=t("App"),bp=t(" by changing the line "),ea=l("code"),vp=t("self.ball = Ball(PLACEHOLDER_POSITION, PLACEHOLDER_VELOCITY)"),Ep=t(" from using the placeholders to something like "),oa=l("code"),_p=t("self.ball = Ball(20, 20, 2, 2)"),xp=t(". When you run the script now, you should see your ball, standing there, proudly, 20 pixels from the left and 20 pixels from the top border of the window. It won\u2019t move though, since we haven\u2019t told the "),pa=l("code"),gp=t("Ball"),Bp=t(" what to do with its velocity values yet."),Dt=u(),nn=l("h3"),Ip=t("Velocity"),Ot=u(),D=l("p"),Lp=t("Now we should give our "),la=l("code"),Tp=t("Ball "),Sp=t("class its own "),ca=l("code"),Ap=t("update"),Pp=t("()\xA0`method to make sure it knows what to do with those velocity values:"),Rt=u(),ys=l("pre"),Zt=u(),E=l("p"),Hp=t("We now have to call this "),ia=l("code"),Cp=t("update()"),Dp=t(" method within our "),ua=l("code"),Op=t("App"),Rp=t("\u2019s own update method, otherwise, it won\u2019t be called at every frame. So add the line "),ra=l("code"),Zp=t("self.ball.update()"),Np=t(" there (but outside the scope of our existing if-statement). We\u2019re not done though. This will run our ball off the screen, never to be seen again (feel free to try it out). Let\u2019s constrain our ball\u2019s movement by adding two simple rules to the "),ka=l("code"),Mp=t("update()"),Wp=t("-method:"),Nt=u(),ws=l("pre"),Mt=u(),$=l("p"),jp=t("This makes sure that when the ball hits either the top or the bottom border of the screen, it will change its direction on the y-axis. The number 2 here represents the size of the ball and since this is a value now that we are using repeatedly, we should store it in a variable with something like "),fa=l("code"),Vp=t("BALL_SIZE = 2"),Gp=t("."),Wt=u(),an=l("p"),qp=t("We could also add similar rules for the left and right border here, but since touching the left or right border should later end the game, we can omit this here."),jt=u(),U=l("p"),zp=t("At this point, our "),ha=l("code"),Yp=t("Ball"),Fp=t("-class looks like this:"),Vt=u(),ms=l("pre"),Gt=u(),tn=l("p"),A=l("strong"),Kp=t("(Don\u2019t forget to update the "),da=l("code"),Qp=t("App"),$p=t("\u2019s "),ya=l("code"),Up=t("draw()"),Jp=t(" method to use the newly created "),wa=l("code"),Xp=t("BALL_SIZE"),sl=t(" constant as well.)"),qt=u(),en=l("p"),nl=t("As of right now, we have no control over the ball\u2019s speed other than indirectly via the values we pass at the time of the initialization. This is a problem for two reasons: 1) The speed of the ball will vary based on its angle (I\u2019m not going to go into detail here, but if you want to try it out, you can take the script we have written so far and make some more balls with different velocity values and watch how they behave). 2) If we were to change the speed of the ball (to make it harder as the game goes along for example), we couldn\u2019t easily do so."),zt=u(),on=l("p"),al=t("To solve this problem, we need to \u2018normalize\u2019 the vector, which means that you figure out a vector\u2019s length, and reduce it to 1. With a vector always having the same length, regardless of its angle, you can then reliably control its speed."),Yt=u(),pn=l("p"),tl=t("We could include something like a normalize() method in our existing Vec2 class, but for our purposes, I think it\u2019s a better solution to just write another class for normalized 2D vectors. A class that does everything we just discussed would look like this:"),Ft=u(),bs=l("pre"),Kt=u(),m=l("p"),el=t("For this to work we need to do three things: "),ma=l("code"),ol=t("import math"),pl=t(" at the top of the script, update our "),ba=l("code"),ll=t("Ball"),cl=t("\u2019s "),va=l("code"),il=t("__init__()"),ul=t(" method to use the new class like so: "),Ea=l("code"),rl=t("self.velocity = Vec2_norm(vx, vy)"),kl=t(" and create a constant variable "),_a=l("code"),fl=t("BALL_SPEED = 2"),hl=t("."),Qt=u(),ln=l("p"),dl=t("Whew. That was a lot. If you need a break, this would be a great point to take one. Just so we\u2019re on the same page, here is the full script we are having so far:"),$t=u(),vs=l("pre"),Ut=u(),cn=l("h2"),yl=t("Batting"),Jt=u(),un=l("p"),wl=t("Did you run it, did it work? Cool. Now we\u2019re still missing a crucial part of the game, which is the bats. So let\u2019s implement the steps for the bats, what we already know how to do:"),Xt=u(),rn=l("ol"),xa=l("li"),ml=t("Write a class"),se=u(),Es=l("pre"),ne=u(),kn=l("p"),bl=t("We don\u2019t need a vector for the velocity in this case, since the bats will only be moving on one axis and we can also just set it to 0 right away since the bats shouldn\u2019t be moving when the game starts."),ae=u(),fn=l("ol"),ga=l("li"),vl=t("Let\u2019s instantiate two bricks with positions on the left and on the right side of the screen in our App, right when it loads:"),te=u(),_s=l("pre"),ee=u(),hn=l("ol"),g=l("li"),El=t("Let\u2019s draw a rectangle shape in our "),Ba=l("code"),_l=t("App"),xl=t("\u2019s "),Ia=l("code"),gl=t("draw()"),Bl=t(" method for our bats. Let\u2019s also apply what we have learned when making the "),La=l("code"),Il=t("Ball"),Ll=t(" and set a variable for "),Ta=l("code"),Tl=t("BAT_SIZE = 8"),Sl=t(" right away."),oe=u(),xs=l("pre"),pe=u(),dn=l("ol"),P=l("li"),Al=t("In anticipation that this is what we are writing next, let\u2019s call our bats\u2019 "),Sa=l("code"),Pl=t("update()"),Hl=t(" method inside the "),Aa=l("code"),Cl=t("App"),Dl=t("\u2019s own "),Pa=l("code"),Ol=t("update()"),Rl=t(" method as we did for the ball."),le=u(),gs=l("pre"),ce=u(),J=l("p"),Zl=t("Okay, so now let\u2019s get to that "),Ha=l("code"),Nl=t("update()"),Ml=t(" method itself."),ie=u(),yn=l("p"),Wl=t(`First, we need to tell it (like the Ball), what to do with its velocity value,
secondly, we want to tell it to change its velocity on button-press`),ue=u(),Bs=l("pre"),re=u(),wn=l("p"),jl=t("and third, we want the bats to stop when they hit the top or bottom edge of the screen."),ke=u(),Is=l("pre"),fe=u(),Ls=l("p"),Vl=t("If you run the script now, all the pieces are in place, but when we try to hit the ball with the bat, it just passes right through. That\u2019s obviously not what we want. If we were using a more sophisticated game engine, we\u2019d do something like drawing a \u2018hitbox\u2019 around our game objects, or we would make the objects rigid bodies, something of this sort. In Pyxel though, we have to implement this behavior ourselves. Let\u2019s hold on for a second and think about this thoroughly, remember: "),Ca=l("strong"),Gl=t("think twice, code once."),he=u(),mn=l("h2"),ql=t("Hitting on it"),de=t("\nOkay, so the hitbox is a property of the bats and it should correlate with the drawn rectangle. So it would make sense to have a hitbox attribute in the `Bat` class and then draw that hitbox rather than arbitrary values as we are doing right now.\n"),bn=l("p"),zl=t("Also, since the hitbox will be a collection of various values, it would be a good idea to write its own class, nothing fancy, something like:"),ye=u(),Ts=l("pre"),we=u(),O=l("p"),Yl=t("Let\u2019s take a look inside our "),Da=l("code"),Fl=t("App"),Kl=t("\u2019s "),Oa=l("code"),Ql=t("draw()"),$l=t(" method:"),me=u(),Ss=l("pre"),be=u(),X=l("p"),Ul=t("Let\u2019s cut those calculations and rather use them in our "),Ra=l("code"),Jl=t("Bat"),Xl=t(" class to instantiate a hitbox:"),ve=u(),As=l("pre"),Ee=u(),R=l("p"),sc=t("This allows us to use the hitboxes of our bats to draw the rectangles, again in our "),Za=l("code"),nc=t("App"),ac=t("\u2019s "),Na=l("code"),tc=t("draw()"),ec=t(" method, we can simply write:"),_e=u(),Ps=l("pre"),xe=u(),vn=l("p"),oc=t("It might not seem like a huge deal, but this actually means that if we calculate whether or not the ball has been hit by the bat, this will always align with what the user sees on their screen, which is kind of important for obvious reasons."),ge=u(),Z=l("p"),pc=t("Before we continue, we have to make sure the hitbox also updates every frame, so we have to update the "),Ma=l("code"),lc=t("Bat"),cc=t("\u2019s "),Wa=l("code"),ic=t("update()"),uc=t(" method:"),Be=u(),Hs=l("pre"),Ie=u(),En=l("p"),rc=t("Great, so let\u2019s move over and write a simple conditional statement that checks whether or not the position of the ball is inside the bat\u2019s hitbox, and if it is, we want the ball to reverse it\u2019s velocity on the x-axis. This is what I came up with:"),Le=u(),Cs=l("pre"),Te=u(),_n=l("p"),ja=l("strong"),kc=t("(If you spot a problem with this right away, you would be right, if not, I\u2019m revisiting this in the last segment as an opportunity to debug the script, for now though, this does what it\u2019s supposed to do.)"),Se=u(),xn=l("h2"),fc=t("Scoring and losing"),Ae=u(),_=l("p"),hc=t("The game works! Let\u2019s implement the score and the loss condition: For the loss condition, we just check for the ball\u2019s position on the x-axis and if it\u2019s below 0 or farther right than the screen width, the game is over. For the score, we initiate the "),Va=l("code"),dc=t("App"),yc=t(" with a "),Ga=l("code"),wc=t("score"),mc=t(" attribute of 0. Now every time the ball hits a bat, we increment the score by 1. After those small changes, the "),qa=l("code"),bc=t("App"),vc=t("\u2019s "),za=l("code"),Ec=t("update()"),_c=t(" method should look like this:"),Pe=u(),Ds=l("pre"),He=u(),N=l("p"),xc=t("Finally, let\u2019s give the user some feedback on his score, by including the score as text on the screen. Inside the "),Ya=l("code"),gc=t("App"),Bc=t("\u2019s "),Fa=l("code"),Ic=t("draw()"),Lc=t(" method, let\u2019s insert:"),Ce=u(),Os=l("pre"),De=u(),gn=l("p"),Tc=t("And that\u2019s it! The game is working and is eager to be played. In case you went off the road somewhere and need help finding back, here is everything we just did, as a whole:"),Oe=u(),Rs=l("pre"),Re=u(),Bn=l("h2"),Sc=t("Where to go from here"),Ze=u(),In=l("p"),Ac=t("Alright, a very basic version of the game is done, but let\u2019s be honest, it could be more exciting. Here are some suggestions about how to improve the game, that you can try on your own:"),Ne=u(),B=l("ul"),ss=l("li"),Pc=t("To make the game less predictable, let\u2019s change the ball\u2019s angle with which he bounces back from the bat by a small random value. Hint: you will probably want to "),Ka=l("code"),Hc=t("from random import uniform"),Cc=t(" for this one."),Qa=l("ul"),$a=l("li"),Dc=t("More advanced: Make the angle change based on the position of the ball relative to the position of the bat at the time of contact."),Oc=u(),z=l("li"),Rc=t("Make the game harder as it goes along, maybe increase the ball speed a little every 5 points (it isn\u2019t technically necessary, but it would be good practice to rename the "),Ua=l("code"),Zc=t("BALL_SPEED"),Nc=t(" variable to "),Ja=l("code"),Mc=t("ball_speed"),Wc=t(", since all-cap variable names generally indicate constants)."),jc=u(),Xa=l("li"),Vc=t("Use different color schemes. Maybe even change colors dynamically throughout the game (to indicate an increase in ball speed for example)."),Gc=u(),st=l("li"),qc=t("There is a bug, that when the ball enters the bat from the bottom or top rather than the side, it will get kind of stuck there, maybe you can figure out what the problem is and fix it?"),Me=u(),We=l("hr"),je=u(),ns=l("p"),zc=t("Edit: Stepping every aspect of this tutorial up (and adding some new ones): Check out this project on GitHub: "),Zs=l("a"),Yc=t("github.com/timbledum/asteroids"),Fc=t(`
If you want to level up, examining this very well written and commented repository would be well-invested time.`),this.h()},l(s){f=c(s,"P",{});var o=i(f);b=c(o,"EM",{});var Ve=i(b);G=e(Ve,"This post has been ported from the old blog and slightly edited on the 13"),q=c(Ve,"SUP",{});var $c=i(q);h=e($c,"th"),$c.forEach(n),S=e(Ve," of May 2022."),Ve.forEach(n),o.forEach(n),os=r(s),Ms=c(s,"P",{});var Uc=i(Ms);Je=e(Uc,"Making games is one of the coolest things you can do with self-taught programming skills. You have complete creative freedom, you don\u2019t have to have a unique and marketable idea and you\u2019re not potentially putting anyone in danger by messing up."),Uc.forEach(n),at=r(s),H=c(s,"P",{});var Ln=i(H);Xe=e(Ln,"While there are a lot of great game engines out there (my favorite being "),ps=c(Ln,"A",{target:!0,href:!0});var Jc=i(ps);so=e(Jc,"Godot"),Jc.forEach(n),no=e(Ln,"), I recently came across an awesome project on GitHub named "),ls=c(Ln,"A",{target:!0,href:!0});var Xc=i(ls);ao=e(Xc,"Pyxel"),Xc.forEach(n),to=e(Ln,". It is a game engine aiming to enable a quick and easy way to develop games in a retro style."),Ln.forEach(n),tt=r(s),Ws=c(s,"P",{});var si=i(Ws);eo=e(si,"I have played around with it a little and I was having such a good time playing around with it, that I thought I would write up a small little tutorial about how I coded a quick version of \u201CPong\u201D in just shy of 130 lines of Python."),si.forEach(n),et=r(s),js=c(s,"H2",{});var ni=i(js);oo=e(ni,"What we\u2019re building"),ni.forEach(n),ot=r(s),Vs=c(s,"P",{});var ai=i(Vs);po=e(ai,"So this version of Pong is a single-player version where one player controls both bats and gets a point every time they hit the ball. Easy enough? Let\u2019s do it."),ai.forEach(n),pt=r(s),Gs=c(s,"P",{});var ti=i(Gs);On=c(ti,"EM",{});var ei=i(On);lo=e(ei,"(Screenshot lost during porting, trying to recover.)"),ei.forEach(n),ti.forEach(n),lt=r(s),qs=c(s,"H2",{});var oi=i(qs);co=e(oi,"Setting up the basics"),oi.forEach(n),ct=r(s),cs=c(s,"PRE",{class:!0});var Nr=i(cs);Nr.forEach(n),it=r(s),zs=c(s,"P",{});var pi=i(zs);io=e(pi,"So here we are just wrapping our app in its own class, using Pyxel\u2019s built-in methods to initialize the screen and run the game."),pi.forEach(n),ut=r(s),Y=c(s,"P",{});var Ge=i(Y);uo=e(Ge,"Pyxel\u2019s "),Rn=c(Ge,"CODE",{});var li=i(Rn);ro=e(li,"run()"),li.forEach(n),ko=e(Ge,"-method takes in two functions as arguments, one that will update the game before every frame and one that will redraw the screen after the changes have been calculated, which I have named accordingly."),Ge.forEach(n),rt=r(s),F=c(s,"P",{});var qe=i(F);fo=e(qe,"So let\u2019s write those methods inside the "),Zn=c(qe,"CODE",{});var ci=i(Zn);ho=e(ci,"App"),ci.forEach(n),yo=e(qe,":"),qe.forEach(n),kt=r(s),is=c(s,"PRE",{class:!0});var Mr=i(is);Mr.forEach(n),ft=r(s),y=c(s,"P",{});var I=i(y);wo=e(I,"Here the "),Nn=c(I,"CODE",{});var ii=i(Nn);mo=e(ii,"update()"),ii.forEach(n),bo=e(I,"-method does nothing more - for now -, but to listen for a button press of the \u201CQ\u201D-key and quit the program, when it receives "),Mn=c(I,"CODE",{});var ui=i(Mn);vo=e(ui,"True"),ui.forEach(n),Eo=e(I,". The "),Wn=c(I,"CODE",{});var ri=i(Wn);_o=e(ri,"draw()"),ri.forEach(n),xo=e(I,"-method uses the built-in "),jn=c(I,"CODE",{});var ki=i(jn);go=e(ki,"cls()"),ki.forEach(n),Bo=e(I,"-method to clear the screen using the color passed to it (in this case, 0 represents black, Pyxel exposes an enumerated color palette of 16 colors you can view "),Ys=c(I,"A",{href:!0});var fi=i(Ys);Io=e(fi,"in their docs"),fi.forEach(n),Lo=e(I,")."),I.forEach(n),ht=r(s),Fs=c(s,"P",{});var hi=i(Fs);To=e(hi,"Hooray! If we run this script, we should get a black window that does absolutely nothing. Not that exciting, however, you can check if everything is put together correctly by pressing the \u201CQ\u201D-key. If the window closes, everything works as expected."),hi.forEach(n),dt=r(s),Ks=c(s,"H2",{});var di=i(Ks);So=e(di,"Balling"),di.forEach(n),yt=r(s),Qs=c(s,"P",{});var yi=i(Qs);Ao=e(yi,"Arguably the most important game object in Pong is the ball. Let\u2019s write a class for our ball."),yi.forEach(n),wt=r(s),us=c(s,"PRE",{class:!0});var Wr=i(us);Wr.forEach(n),mt=r(s),v=c(s,"P",{});var M=i(v);Po=e(M,"The ball doesn\u2019t really need any other properties than a position to define where it is and a velocity to define where it is going. So far so good. Let\u2019s make sure our "),Vn=c(M,"CODE",{});var wi=i(Vn);Ho=e(wi,"App"),wi.forEach(n),Co=e(M," knows about our "),Gn=c(M,"CODE",{});var mi=i(Gn);Do=e(mi,"Ball"),mi.forEach(n),Oo=e(M,": For this purpose we are going to initialize an instance of the "),qn=c(M,"CODE",{});var bi=i(qn);Ro=e(bi,"Ball"),bi.forEach(n),Zo=e(M,", right when the "),zn=c(M,"CODE",{});var vi=i(zn);No=e(vi,"App"),vi.forEach(n),Mo=e(M," loads, like so:"),M.forEach(n),bt=r(s),rs=c(s,"PRE",{class:!0});var jr=i(rs);jr.forEach(n),vt=r(s),K=c(s,"P",{});var ze=i(K);Wo=e(ze,"and in the "),Yn=c(ze,"CODE",{});var Ei=i(Yn);jo=e(Ei,"draw()"),Ei.forEach(n),Vo=e(ze," method, we will make sure a circle is drawn to represent the ball:"),ze.forEach(n),Et=r(s),ks=c(s,"PRE",{class:!0});var Vr=i(ks);Vr.forEach(n),_t=r(s),C=c(s,"P",{});var Tn=i(C);Go=e(Tn,"Here, 2 is the radius of the circle (aka our "),Fn=c(Tn,"CODE",{});var _i=i(Fn);qo=e(_i,"Ball"),_i.forEach(n),zo=e(Tn,") and 7 is the color in which the ball is drawn. Hold on though, Pyxel\u2019s "),Kn=c(Tn,"CODE",{});var xi=i(Kn);Yo=e(xi,"circ()"),xi.forEach(n),Fo=e(Tn," method needs two positional inputs, one for the x-axis (horizontal) and one for the y-axis (vertical). Let\u2019s get onto that."),Tn.forEach(n),xt=r(s),$s=c(s,"H2",{});var gi=i($s);Ko=e(gi,"Position and Velocity"),gi.forEach(n),gt=r(s),Us=c(s,"P",{});var Bi=i(Us);Qo=e(Bi,"On a two-dimensional playing field, you will generally need two values to define the position of an object, one for each dimension (axis)."),Bi.forEach(n),Bt=r(s),Js=c(s,"P",{});var Ii=i(Js);$o=e(Ii,"This is also true for the velocity, you need two values to know in which direction the object is moving, however, the fact that you probably also want to keep control over the speed of the object, makes this a little trickier, so let\u2019s focus on the position for now."),Ii.forEach(n),It=r(s),Xs=c(s,"H3",{});var Li=i(Xs);Uo=e(Li,"Position"),Li.forEach(n),Lt=r(s),sn=c(s,"P",{});var Ti=i(sn);Jo=e(Ti,"Since we will have to manage the position of multiple objects in this project, it makes sense to write a class for those 2D vectors:"),Ti.forEach(n),Tt=r(s),fs=c(s,"PRE",{class:!0});var Gr=i(fs);Gr.forEach(n),St=r(s),Q=c(s,"P",{});var Ye=i(Q);Xo=e(Ye,"Easy enough. Let\u2019s apply this to our "),Qn=c(Ye,"CODE",{});var Si=i(Qn);sp=e(Si,"Ball"),Si.forEach(n),np=e(Ye,":"),Ye.forEach(n),At=r(s),hs=c(s,"PRE",{class:!0});var qr=i(hs);qr.forEach(n),Pt=r(s),d=c(s,"P",{});var x=i(d);ap=e(x,"Now, our Ball gets initialized with four values: an "),$n=c(x,"CODE",{});var Ai=i($n);tp=e(Ai,"x"),Ai.forEach(n),ep=e(x," and a "),Un=c(x,"CODE",{});var Pi=i(Un);op=e(Pi,"y"),Pi.forEach(n),pp=e(x," value for each the position and the velocity. Those values are then swiftly turned into "),Jn=c(x,"CODE",{});var Hi=i(Jn);lp=e(Hi,"Vec2"),Hi.forEach(n),cp=e(x,"s, so we can easily access the values, i.e. via "),Xn=c(x,"CODE",{});var Ci=i(Xn);ip=e(Ci,"any_ball.position.x"),Ci.forEach(n),up=e(x,". Let\u2019s make use of that in our "),sa=c(x,"CODE",{});var Di=i(sa);rp=e(Di,"App"),Di.forEach(n),kp=e(x,"\u2019s "),na=c(x,"CODE",{});var Oi=i(na);fp=e(Oi,"draw() "),Oi.forEach(n),hp=e(x,"method:"),x.forEach(n),Ht=r(s),ds=c(s,"PRE",{class:!0});var zr=i(ds);zr.forEach(n),Ct=r(s),w=c(s,"P",{});var L=i(w);dp=e(L,"Now let\u2019s properly initiate the "),aa=c(L,"CODE",{});var Ri=i(aa);yp=e(Ri,"Ball"),Ri.forEach(n),wp=e(L," in our "),ta=c(L,"CODE",{});var Zi=i(ta);mp=e(Zi,"App"),Zi.forEach(n),bp=e(L," by changing the line "),ea=c(L,"CODE",{});var Ni=i(ea);vp=e(Ni,"self.ball = Ball(PLACEHOLDER_POSITION, PLACEHOLDER_VELOCITY)"),Ni.forEach(n),Ep=e(L," from using the placeholders to something like "),oa=c(L,"CODE",{});var Mi=i(oa);_p=e(Mi,"self.ball = Ball(20, 20, 2, 2)"),Mi.forEach(n),xp=e(L,". When you run the script now, you should see your ball, standing there, proudly, 20 pixels from the left and 20 pixels from the top border of the window. It won\u2019t move though, since we haven\u2019t told the "),pa=c(L,"CODE",{});var Wi=i(pa);gp=e(Wi,"Ball"),Wi.forEach(n),Bp=e(L," what to do with its velocity values yet."),L.forEach(n),Dt=r(s),nn=c(s,"H3",{});var ji=i(nn);Ip=e(ji,"Velocity"),ji.forEach(n),Ot=r(s),D=c(s,"P",{});var Sn=i(D);Lp=e(Sn,"Now we should give our "),la=c(Sn,"CODE",{});var Vi=i(la);Tp=e(Vi,"Ball "),Vi.forEach(n),Sp=e(Sn,"class its own "),ca=c(Sn,"CODE",{});var Gi=i(ca);Ap=e(Gi,"update"),Gi.forEach(n),Pp=e(Sn,"()\xA0`method to make sure it knows what to do with those velocity values:"),Sn.forEach(n),Rt=r(s),ys=c(s,"PRE",{class:!0});var Yr=i(ys);Yr.forEach(n),Zt=r(s),E=c(s,"P",{});var W=i(E);Hp=e(W,"We now have to call this "),ia=c(W,"CODE",{});var qi=i(ia);Cp=e(qi,"update()"),qi.forEach(n),Dp=e(W," method within our "),ua=c(W,"CODE",{});var zi=i(ua);Op=e(zi,"App"),zi.forEach(n),Rp=e(W,"\u2019s own update method, otherwise, it won\u2019t be called at every frame. So add the line "),ra=c(W,"CODE",{});var Yi=i(ra);Zp=e(Yi,"self.ball.update()"),Yi.forEach(n),Np=e(W," there (but outside the scope of our existing if-statement). We\u2019re not done though. This will run our ball off the screen, never to be seen again (feel free to try it out). Let\u2019s constrain our ball\u2019s movement by adding two simple rules to the "),ka=c(W,"CODE",{});var Fi=i(ka);Mp=e(Fi,"update()"),Fi.forEach(n),Wp=e(W,"-method:"),W.forEach(n),Nt=r(s),ws=c(s,"PRE",{class:!0});var Fr=i(ws);Fr.forEach(n),Mt=r(s),$=c(s,"P",{});var Fe=i($);jp=e(Fe,"This makes sure that when the ball hits either the top or the bottom border of the screen, it will change its direction on the y-axis. The number 2 here represents the size of the ball and since this is a value now that we are using repeatedly, we should store it in a variable with something like "),fa=c(Fe,"CODE",{});var Ki=i(fa);Vp=e(Ki,"BALL_SIZE = 2"),Ki.forEach(n),Gp=e(Fe,"."),Fe.forEach(n),Wt=r(s),an=c(s,"P",{});var Qi=i(an);qp=e(Qi,"We could also add similar rules for the left and right border here, but since touching the left or right border should later end the game, we can omit this here."),Qi.forEach(n),jt=r(s),U=c(s,"P",{});var Ke=i(U);zp=e(Ke,"At this point, our "),ha=c(Ke,"CODE",{});var $i=i(ha);Yp=e($i,"Ball"),$i.forEach(n),Fp=e(Ke,"-class looks like this:"),Ke.forEach(n),Vt=r(s),ms=c(s,"PRE",{class:!0});var Kr=i(ms);Kr.forEach(n),Gt=r(s),tn=c(s,"P",{});var Ui=i(tn);A=c(Ui,"STRONG",{});var as=i(A);Kp=e(as,"(Don\u2019t forget to update the "),da=c(as,"CODE",{});var Ji=i(da);Qp=e(Ji,"App"),Ji.forEach(n),$p=e(as,"\u2019s "),ya=c(as,"CODE",{});var Xi=i(ya);Up=e(Xi,"draw()"),Xi.forEach(n),Jp=e(as," method to use the newly created "),wa=c(as,"CODE",{});var su=i(wa);Xp=e(su,"BALL_SIZE"),su.forEach(n),sl=e(as," constant as well.)"),as.forEach(n),Ui.forEach(n),qt=r(s),en=c(s,"P",{});var nu=i(en);nl=e(nu,"As of right now, we have no control over the ball\u2019s speed other than indirectly via the values we pass at the time of the initialization. This is a problem for two reasons: 1) The speed of the ball will vary based on its angle (I\u2019m not going to go into detail here, but if you want to try it out, you can take the script we have written so far and make some more balls with different velocity values and watch how they behave). 2) If we were to change the speed of the ball (to make it harder as the game goes along for example), we couldn\u2019t easily do so."),nu.forEach(n),zt=r(s),on=c(s,"P",{});var au=i(on);al=e(au,"To solve this problem, we need to \u2018normalize\u2019 the vector, which means that you figure out a vector\u2019s length, and reduce it to 1. With a vector always having the same length, regardless of its angle, you can then reliably control its speed."),au.forEach(n),Yt=r(s),pn=c(s,"P",{});var tu=i(pn);tl=e(tu,"We could include something like a normalize() method in our existing Vec2 class, but for our purposes, I think it\u2019s a better solution to just write another class for normalized 2D vectors. A class that does everything we just discussed would look like this:"),tu.forEach(n),Ft=r(s),bs=c(s,"PRE",{class:!0});var Qr=i(bs);Qr.forEach(n),Kt=r(s),m=c(s,"P",{});var T=i(m);el=e(T,"For this to work we need to do three things: "),ma=c(T,"CODE",{});var eu=i(ma);ol=e(eu,"import math"),eu.forEach(n),pl=e(T," at the top of the script, update our "),ba=c(T,"CODE",{});var ou=i(ba);ll=e(ou,"Ball"),ou.forEach(n),cl=e(T,"\u2019s "),va=c(T,"CODE",{});var pu=i(va);il=e(pu,"__init__()"),pu.forEach(n),ul=e(T," method to use the new class like so: "),Ea=c(T,"CODE",{});var lu=i(Ea);rl=e(lu,"self.velocity = Vec2_norm(vx, vy)"),lu.forEach(n),kl=e(T," and create a constant variable "),_a=c(T,"CODE",{});var cu=i(_a);fl=e(cu,"BALL_SPEED = 2"),cu.forEach(n),hl=e(T,"."),T.forEach(n),Qt=r(s),ln=c(s,"P",{});var iu=i(ln);dl=e(iu,"Whew. That was a lot. If you need a break, this would be a great point to take one. Just so we\u2019re on the same page, here is the full script we are having so far:"),iu.forEach(n),$t=r(s),vs=c(s,"PRE",{class:!0});var $r=i(vs);$r.forEach(n),Ut=r(s),cn=c(s,"H2",{});var uu=i(cn);yl=e(uu,"Batting"),uu.forEach(n),Jt=r(s),un=c(s,"P",{});var ru=i(un);wl=e(ru,"Did you run it, did it work? Cool. Now we\u2019re still missing a crucial part of the game, which is the bats. So let\u2019s implement the steps for the bats, what we already know how to do:"),ru.forEach(n),Xt=r(s),rn=c(s,"OL",{});var ku=i(rn);xa=c(ku,"LI",{});var fu=i(xa);ml=e(fu,"Write a class"),fu.forEach(n),ku.forEach(n),se=r(s),Es=c(s,"PRE",{class:!0});var Ur=i(Es);Ur.forEach(n),ne=r(s),kn=c(s,"P",{});var hu=i(kn);bl=e(hu,"We don\u2019t need a vector for the velocity in this case, since the bats will only be moving on one axis and we can also just set it to 0 right away since the bats shouldn\u2019t be moving when the game starts."),hu.forEach(n),ae=r(s),fn=c(s,"OL",{});var du=i(fn);ga=c(du,"LI",{});var yu=i(ga);vl=e(yu,"Let\u2019s instantiate two bricks with positions on the left and on the right side of the screen in our App, right when it loads:"),yu.forEach(n),du.forEach(n),te=r(s),_s=c(s,"PRE",{class:!0});var Jr=i(_s);Jr.forEach(n),ee=r(s),hn=c(s,"OL",{});var wu=i(hn);g=c(wu,"LI",{});var j=i(g);El=e(j,"Let\u2019s draw a rectangle shape in our "),Ba=c(j,"CODE",{});var mu=i(Ba);_l=e(mu,"App"),mu.forEach(n),xl=e(j,"\u2019s "),Ia=c(j,"CODE",{});var bu=i(Ia);gl=e(bu,"draw()"),bu.forEach(n),Bl=e(j," method for our bats. Let\u2019s also apply what we have learned when making the "),La=c(j,"CODE",{});var vu=i(La);Il=e(vu,"Ball"),vu.forEach(n),Ll=e(j," and set a variable for "),Ta=c(j,"CODE",{});var Eu=i(Ta);Tl=e(Eu,"BAT_SIZE = 8"),Eu.forEach(n),Sl=e(j," right away."),j.forEach(n),wu.forEach(n),oe=r(s),xs=c(s,"PRE",{class:!0});var Xr=i(xs);Xr.forEach(n),pe=r(s),dn=c(s,"OL",{});var _u=i(dn);P=c(_u,"LI",{});var ts=i(P);Al=e(ts,"In anticipation that this is what we are writing next, let\u2019s call our bats\u2019 "),Sa=c(ts,"CODE",{});var xu=i(Sa);Pl=e(xu,"update()"),xu.forEach(n),Hl=e(ts," method inside the "),Aa=c(ts,"CODE",{});var gu=i(Aa);Cl=e(gu,"App"),gu.forEach(n),Dl=e(ts,"\u2019s own "),Pa=c(ts,"CODE",{});var Bu=i(Pa);Ol=e(Bu,"update()"),Bu.forEach(n),Rl=e(ts," method as we did for the ball."),ts.forEach(n),_u.forEach(n),le=r(s),gs=c(s,"PRE",{class:!0});var sk=i(gs);sk.forEach(n),ce=r(s),J=c(s,"P",{});var Qe=i(J);Zl=e(Qe,"Okay, so now let\u2019s get to that "),Ha=c(Qe,"CODE",{});var Iu=i(Ha);Nl=e(Iu,"update()"),Iu.forEach(n),Ml=e(Qe," method itself."),Qe.forEach(n),ie=r(s),yn=c(s,"P",{});var Lu=i(yn);Wl=e(Lu,`First, we need to tell it (like the Ball), what to do with its velocity value,
secondly, we want to tell it to change its velocity on button-press`),Lu.forEach(n),ue=r(s),Bs=c(s,"PRE",{class:!0});var nk=i(Bs);nk.forEach(n),re=r(s),wn=c(s,"P",{});var Tu=i(wn);jl=e(Tu,"and third, we want the bats to stop when they hit the top or bottom edge of the screen."),Tu.forEach(n),ke=r(s),Is=c(s,"PRE",{class:!0});var ak=i(Is);ak.forEach(n),fe=r(s),Ls=c(s,"P",{});var Kc=i(Ls);Vl=e(Kc,"If you run the script now, all the pieces are in place, but when we try to hit the ball with the bat, it just passes right through. That\u2019s obviously not what we want. If we were using a more sophisticated game engine, we\u2019d do something like drawing a \u2018hitbox\u2019 around our game objects, or we would make the objects rigid bodies, something of this sort. In Pyxel though, we have to implement this behavior ourselves. Let\u2019s hold on for a second and think about this thoroughly, remember: "),Ca=c(Kc,"STRONG",{});var Su=i(Ca);Gl=e(Su,"think twice, code once."),Su.forEach(n),Kc.forEach(n),he=r(s),mn=c(s,"H2",{});var Au=i(mn);ql=e(Au,"Hitting on it"),Au.forEach(n),de=e(s,"\nOkay, so the hitbox is a property of the bats and it should correlate with the drawn rectangle. So it would make sense to have a hitbox attribute in the `Bat` class and then draw that hitbox rather than arbitrary values as we are doing right now.\n"),bn=c(s,"P",{});var Pu=i(bn);zl=e(Pu,"Also, since the hitbox will be a collection of various values, it would be a good idea to write its own class, nothing fancy, something like:"),Pu.forEach(n),ye=r(s),Ts=c(s,"PRE",{class:!0});var tk=i(Ts);tk.forEach(n),we=r(s),O=c(s,"P",{});var An=i(O);Yl=e(An,"Let\u2019s take a look inside our "),Da=c(An,"CODE",{});var Hu=i(Da);Fl=e(Hu,"App"),Hu.forEach(n),Kl=e(An,"\u2019s "),Oa=c(An,"CODE",{});var Cu=i(Oa);Ql=e(Cu,"draw()"),Cu.forEach(n),$l=e(An," method:"),An.forEach(n),me=r(s),Ss=c(s,"PRE",{class:!0});var ek=i(Ss);ek.forEach(n),be=r(s),X=c(s,"P",{});var $e=i(X);Ul=e($e,"Let\u2019s cut those calculations and rather use them in our "),Ra=c($e,"CODE",{});var Du=i(Ra);Jl=e(Du,"Bat"),Du.forEach(n),Xl=e($e," class to instantiate a hitbox:"),$e.forEach(n),ve=r(s),As=c(s,"PRE",{class:!0});var ok=i(As);ok.forEach(n),Ee=r(s),R=c(s,"P",{});var Pn=i(R);sc=e(Pn,"This allows us to use the hitboxes of our bats to draw the rectangles, again in our "),Za=c(Pn,"CODE",{});var Ou=i(Za);nc=e(Ou,"App"),Ou.forEach(n),ac=e(Pn,"\u2019s "),Na=c(Pn,"CODE",{});var Ru=i(Na);tc=e(Ru,"draw()"),Ru.forEach(n),ec=e(Pn," method, we can simply write:"),Pn.forEach(n),_e=r(s),Ps=c(s,"PRE",{class:!0});var pk=i(Ps);pk.forEach(n),xe=r(s),vn=c(s,"P",{});var Zu=i(vn);oc=e(Zu,"It might not seem like a huge deal, but this actually means that if we calculate whether or not the ball has been hit by the bat, this will always align with what the user sees on their screen, which is kind of important for obvious reasons."),Zu.forEach(n),ge=r(s),Z=c(s,"P",{});var Hn=i(Z);pc=e(Hn,"Before we continue, we have to make sure the hitbox also updates every frame, so we have to update the "),Ma=c(Hn,"CODE",{});var Nu=i(Ma);lc=e(Nu,"Bat"),Nu.forEach(n),cc=e(Hn,"\u2019s "),Wa=c(Hn,"CODE",{});var Mu=i(Wa);ic=e(Mu,"update()"),Mu.forEach(n),uc=e(Hn," method:"),Hn.forEach(n),Be=r(s),Hs=c(s,"PRE",{class:!0});var lk=i(Hs);lk.forEach(n),Ie=r(s),En=c(s,"P",{});var Wu=i(En);rc=e(Wu,"Great, so let\u2019s move over and write a simple conditional statement that checks whether or not the position of the ball is inside the bat\u2019s hitbox, and if it is, we want the ball to reverse it\u2019s velocity on the x-axis. This is what I came up with:"),Wu.forEach(n),Le=r(s),Cs=c(s,"PRE",{class:!0});var ck=i(Cs);ck.forEach(n),Te=r(s),_n=c(s,"P",{});var ju=i(_n);ja=c(ju,"STRONG",{});var Vu=i(ja);kc=e(Vu,"(If you spot a problem with this right away, you would be right, if not, I\u2019m revisiting this in the last segment as an opportunity to debug the script, for now though, this does what it\u2019s supposed to do.)"),Vu.forEach(n),ju.forEach(n),Se=r(s),xn=c(s,"H2",{});var Gu=i(xn);fc=e(Gu,"Scoring and losing"),Gu.forEach(n),Ae=r(s),_=c(s,"P",{});var V=i(_);hc=e(V,"The game works! Let\u2019s implement the score and the loss condition: For the loss condition, we just check for the ball\u2019s position on the x-axis and if it\u2019s below 0 or farther right than the screen width, the game is over. For the score, we initiate the "),Va=c(V,"CODE",{});var qu=i(Va);dc=e(qu,"App"),qu.forEach(n),yc=e(V," with a "),Ga=c(V,"CODE",{});var zu=i(Ga);wc=e(zu,"score"),zu.forEach(n),mc=e(V," attribute of 0. Now every time the ball hits a bat, we increment the score by 1. After those small changes, the "),qa=c(V,"CODE",{});var Yu=i(qa);bc=e(Yu,"App"),Yu.forEach(n),vc=e(V,"\u2019s "),za=c(V,"CODE",{});var Fu=i(za);Ec=e(Fu,"update()"),Fu.forEach(n),_c=e(V," method should look like this:"),V.forEach(n),Pe=r(s),Ds=c(s,"PRE",{class:!0});var ik=i(Ds);ik.forEach(n),He=r(s),N=c(s,"P",{});var Cn=i(N);xc=e(Cn,"Finally, let\u2019s give the user some feedback on his score, by including the score as text on the screen. Inside the "),Ya=c(Cn,"CODE",{});var Ku=i(Ya);gc=e(Ku,"App"),Ku.forEach(n),Bc=e(Cn,"\u2019s "),Fa=c(Cn,"CODE",{});var Qu=i(Fa);Ic=e(Qu,"draw()"),Qu.forEach(n),Lc=e(Cn," method, let\u2019s insert:"),Cn.forEach(n),Ce=r(s),Os=c(s,"PRE",{class:!0});var uk=i(Os);uk.forEach(n),De=r(s),gn=c(s,"P",{});var $u=i(gn);Tc=e($u,"And that\u2019s it! The game is working and is eager to be played. In case you went off the road somewhere and need help finding back, here is everything we just did, as a whole:"),$u.forEach(n),Oe=r(s),Rs=c(s,"PRE",{class:!0});var rk=i(Rs);rk.forEach(n),Re=r(s),Bn=c(s,"H2",{});var Uu=i(Bn);Sc=e(Uu,"Where to go from here"),Uu.forEach(n),Ze=r(s),In=c(s,"P",{});var Ju=i(In);Ac=e(Ju,"Alright, a very basic version of the game is done, but let\u2019s be honest, it could be more exciting. Here are some suggestions about how to improve the game, that you can try on your own:"),Ju.forEach(n),Ne=r(s),B=c(s,"UL",{});var es=i(B);ss=c(es,"LI",{});var nt=i(ss);Pc=e(nt,"To make the game less predictable, let\u2019s change the ball\u2019s angle with which he bounces back from the bat by a small random value. Hint: you will probably want to "),Ka=c(nt,"CODE",{});var Xu=i(Ka);Hc=e(Xu,"from random import uniform"),Xu.forEach(n),Cc=e(nt," for this one."),Qa=c(nt,"UL",{});var sr=i(Qa);$a=c(sr,"LI",{});var nr=i($a);Dc=e(nr,"More advanced: Make the angle change based on the position of the ball relative to the position of the bat at the time of contact."),nr.forEach(n),sr.forEach(n),nt.forEach(n),Oc=r(es),z=c(es,"LI",{});var Dn=i(z);Rc=e(Dn,"Make the game harder as it goes along, maybe increase the ball speed a little every 5 points (it isn\u2019t technically necessary, but it would be good practice to rename the "),Ua=c(Dn,"CODE",{});var ar=i(Ua);Zc=e(ar,"BALL_SPEED"),ar.forEach(n),Nc=e(Dn," variable to "),Ja=c(Dn,"CODE",{});var tr=i(Ja);Mc=e(tr,"ball_speed"),tr.forEach(n),Wc=e(Dn,", since all-cap variable names generally indicate constants)."),Dn.forEach(n),jc=r(es),Xa=c(es,"LI",{});var er=i(Xa);Vc=e(er,"Use different color schemes. Maybe even change colors dynamically throughout the game (to indicate an increase in ball speed for example)."),er.forEach(n),Gc=r(es),st=c(es,"LI",{});var or=i(st);qc=e(or,"There is a bug, that when the ball enters the bat from the bottom or top rather than the side, it will get kind of stuck there, maybe you can figure out what the problem is and fix it?"),or.forEach(n),es.forEach(n),Me=r(s),We=c(s,"HR",{}),je=r(s),ns=c(s,"P",{});var Ue=i(ns);zc=e(Ue,"Edit: Stepping every aspect of this tutorial up (and adding some new ones): Check out this project on GitHub: "),Zs=c(Ue,"A",{target:!0,href:!0});var pr=i(Zs);Yc=e(pr,"github.com/timbledum/asteroids"),pr.forEach(n),Fc=e(Ue,`
If you want to level up, examining this very well written and commented repository would be well-invested time.`),Ue.forEach(n),this.h()},h(){k(ps,"target","_blank"),k(ps,"href","https://godotengine.org/"),k(ls,"target","_blank"),k(ls,"href","https://github.com/kitao/pyxel"),k(cs,"class","language-py"),k(is,"class","language-py"),k(Ys,"href","https://github.com/kitao/pyxel"),k(us,"class","language-py"),k(rs,"class","language-py"),k(ks,"class","language-py"),k(fs,"class","language-py"),k(hs,"class","language-py"),k(ds,"class","language-py"),k(ys,"class","language-py"),k(ws,"class","language-py"),k(ms,"class","language-py"),k(bs,"class","language-py"),k(vs,"class","language-py"),k(Es,"class","language-py"),k(_s,"class","language-py"),k(xs,"class","language-py"),k(gs,"class","language-py"),k(Bs,"class","language-py"),k(Is,"class","language-py"),k(Ts,"class","language-py"),k(Ss,"class","language-py"),k(As,"class","language-py"),k(Ps,"class","language-py"),k(Hs,"class","language-py"),k(Cs,"class","language-py"),k(Ds,"class","language-py"),k(Os,"class","language-py"),k(Rs,"class","language-py"),k(Zs,"target","_blank"),k(Zs,"href","https://github.com/timbledum/asteroids")},m(s,o){p(s,f,o),a(f,b),a(b,G),a(b,q),a(q,h),a(b,S),p(s,os,o),p(s,Ms,o),a(Ms,Je),p(s,at,o),p(s,H,o),a(H,Xe),a(H,ps),a(ps,so),a(H,no),a(H,ls),a(ls,ao),a(H,to),p(s,tt,o),p(s,Ws,o),a(Ws,eo),p(s,et,o),p(s,js,o),a(js,oo),p(s,ot,o),p(s,Vs,o),a(Vs,po),p(s,pt,o),p(s,Gs,o),a(Gs,On),a(On,lo),p(s,lt,o),p(s,qs,o),a(qs,co),p(s,ct,o),p(s,cs,o),cs.innerHTML=ur,p(s,it,o),p(s,zs,o),a(zs,io),p(s,ut,o),p(s,Y,o),a(Y,uo),a(Y,Rn),a(Rn,ro),a(Y,ko),p(s,rt,o),p(s,F,o),a(F,fo),a(F,Zn),a(Zn,ho),a(F,yo),p(s,kt,o),p(s,is,o),is.innerHTML=rr,p(s,ft,o),p(s,y,o),a(y,wo),a(y,Nn),a(Nn,mo),a(y,bo),a(y,Mn),a(Mn,vo),a(y,Eo),a(y,Wn),a(Wn,_o),a(y,xo),a(y,jn),a(jn,go),a(y,Bo),a(y,Ys),a(Ys,Io),a(y,Lo),p(s,ht,o),p(s,Fs,o),a(Fs,To),p(s,dt,o),p(s,Ks,o),a(Ks,So),p(s,yt,o),p(s,Qs,o),a(Qs,Ao),p(s,wt,o),p(s,us,o),us.innerHTML=kr,p(s,mt,o),p(s,v,o),a(v,Po),a(v,Vn),a(Vn,Ho),a(v,Co),a(v,Gn),a(Gn,Do),a(v,Oo),a(v,qn),a(qn,Ro),a(v,Zo),a(v,zn),a(zn,No),a(v,Mo),p(s,bt,o),p(s,rs,o),rs.innerHTML=fr,p(s,vt,o),p(s,K,o),a(K,Wo),a(K,Yn),a(Yn,jo),a(K,Vo),p(s,Et,o),p(s,ks,o),ks.innerHTML=hr,p(s,_t,o),p(s,C,o),a(C,Go),a(C,Fn),a(Fn,qo),a(C,zo),a(C,Kn),a(Kn,Yo),a(C,Fo),p(s,xt,o),p(s,$s,o),a($s,Ko),p(s,gt,o),p(s,Us,o),a(Us,Qo),p(s,Bt,o),p(s,Js,o),a(Js,$o),p(s,It,o),p(s,Xs,o),a(Xs,Uo),p(s,Lt,o),p(s,sn,o),a(sn,Jo),p(s,Tt,o),p(s,fs,o),fs.innerHTML=dr,p(s,St,o),p(s,Q,o),a(Q,Xo),a(Q,Qn),a(Qn,sp),a(Q,np),p(s,At,o),p(s,hs,o),hs.innerHTML=yr,p(s,Pt,o),p(s,d,o),a(d,ap),a(d,$n),a($n,tp),a(d,ep),a(d,Un),a(Un,op),a(d,pp),a(d,Jn),a(Jn,lp),a(d,cp),a(d,Xn),a(Xn,ip),a(d,up),a(d,sa),a(sa,rp),a(d,kp),a(d,na),a(na,fp),a(d,hp),p(s,Ht,o),p(s,ds,o),ds.innerHTML=wr,p(s,Ct,o),p(s,w,o),a(w,dp),a(w,aa),a(aa,yp),a(w,wp),a(w,ta),a(ta,mp),a(w,bp),a(w,ea),a(ea,vp),a(w,Ep),a(w,oa),a(oa,_p),a(w,xp),a(w,pa),a(pa,gp),a(w,Bp),p(s,Dt,o),p(s,nn,o),a(nn,Ip),p(s,Ot,o),p(s,D,o),a(D,Lp),a(D,la),a(la,Tp),a(D,Sp),a(D,ca),a(ca,Ap),a(D,Pp),p(s,Rt,o),p(s,ys,o),ys.innerHTML=mr,p(s,Zt,o),p(s,E,o),a(E,Hp),a(E,ia),a(ia,Cp),a(E,Dp),a(E,ua),a(ua,Op),a(E,Rp),a(E,ra),a(ra,Zp),a(E,Np),a(E,ka),a(ka,Mp),a(E,Wp),p(s,Nt,o),p(s,ws,o),ws.innerHTML=br,p(s,Mt,o),p(s,$,o),a($,jp),a($,fa),a(fa,Vp),a($,Gp),p(s,Wt,o),p(s,an,o),a(an,qp),p(s,jt,o),p(s,U,o),a(U,zp),a(U,ha),a(ha,Yp),a(U,Fp),p(s,Vt,o),p(s,ms,o),ms.innerHTML=vr,p(s,Gt,o),p(s,tn,o),a(tn,A),a(A,Kp),a(A,da),a(da,Qp),a(A,$p),a(A,ya),a(ya,Up),a(A,Jp),a(A,wa),a(wa,Xp),a(A,sl),p(s,qt,o),p(s,en,o),a(en,nl),p(s,zt,o),p(s,on,o),a(on,al),p(s,Yt,o),p(s,pn,o),a(pn,tl),p(s,Ft,o),p(s,bs,o),bs.innerHTML=Er,p(s,Kt,o),p(s,m,o),a(m,el),a(m,ma),a(ma,ol),a(m,pl),a(m,ba),a(ba,ll),a(m,cl),a(m,va),a(va,il),a(m,ul),a(m,Ea),a(Ea,rl),a(m,kl),a(m,_a),a(_a,fl),a(m,hl),p(s,Qt,o),p(s,ln,o),a(ln,dl),p(s,$t,o),p(s,vs,o),vs.innerHTML=_r,p(s,Ut,o),p(s,cn,o),a(cn,yl),p(s,Jt,o),p(s,un,o),a(un,wl),p(s,Xt,o),p(s,rn,o),a(rn,xa),a(xa,ml),p(s,se,o),p(s,Es,o),Es.innerHTML=xr,p(s,ne,o),p(s,kn,o),a(kn,bl),p(s,ae,o),p(s,fn,o),a(fn,ga),a(ga,vl),p(s,te,o),p(s,_s,o),_s.innerHTML=gr,p(s,ee,o),p(s,hn,o),a(hn,g),a(g,El),a(g,Ba),a(Ba,_l),a(g,xl),a(g,Ia),a(Ia,gl),a(g,Bl),a(g,La),a(La,Il),a(g,Ll),a(g,Ta),a(Ta,Tl),a(g,Sl),p(s,oe,o),p(s,xs,o),xs.innerHTML=Br,p(s,pe,o),p(s,dn,o),a(dn,P),a(P,Al),a(P,Sa),a(Sa,Pl),a(P,Hl),a(P,Aa),a(Aa,Cl),a(P,Dl),a(P,Pa),a(Pa,Ol),a(P,Rl),p(s,le,o),p(s,gs,o),gs.innerHTML=Ir,p(s,ce,o),p(s,J,o),a(J,Zl),a(J,Ha),a(Ha,Nl),a(J,Ml),p(s,ie,o),p(s,yn,o),a(yn,Wl),p(s,ue,o),p(s,Bs,o),Bs.innerHTML=Lr,p(s,re,o),p(s,wn,o),a(wn,jl),p(s,ke,o),p(s,Is,o),Is.innerHTML=Tr,p(s,fe,o),p(s,Ls,o),a(Ls,Vl),a(Ls,Ca),a(Ca,Gl),p(s,he,o),p(s,mn,o),a(mn,ql),p(s,de,o),p(s,bn,o),a(bn,zl),p(s,ye,o),p(s,Ts,o),Ts.innerHTML=Sr,p(s,we,o),p(s,O,o),a(O,Yl),a(O,Da),a(Da,Fl),a(O,Kl),a(O,Oa),a(Oa,Ql),a(O,$l),p(s,me,o),p(s,Ss,o),Ss.innerHTML=Ar,p(s,be,o),p(s,X,o),a(X,Ul),a(X,Ra),a(Ra,Jl),a(X,Xl),p(s,ve,o),p(s,As,o),As.innerHTML=Pr,p(s,Ee,o),p(s,R,o),a(R,sc),a(R,Za),a(Za,nc),a(R,ac),a(R,Na),a(Na,tc),a(R,ec),p(s,_e,o),p(s,Ps,o),Ps.innerHTML=Hr,p(s,xe,o),p(s,vn,o),a(vn,oc),p(s,ge,o),p(s,Z,o),a(Z,pc),a(Z,Ma),a(Ma,lc),a(Z,cc),a(Z,Wa),a(Wa,ic),a(Z,uc),p(s,Be,o),p(s,Hs,o),Hs.innerHTML=Cr,p(s,Ie,o),p(s,En,o),a(En,rc),p(s,Le,o),p(s,Cs,o),Cs.innerHTML=Dr,p(s,Te,o),p(s,_n,o),a(_n,ja),a(ja,kc),p(s,Se,o),p(s,xn,o),a(xn,fc),p(s,Ae,o),p(s,_,o),a(_,hc),a(_,Va),a(Va,dc),a(_,yc),a(_,Ga),a(Ga,wc),a(_,mc),a(_,qa),a(qa,bc),a(_,vc),a(_,za),a(za,Ec),a(_,_c),p(s,Pe,o),p(s,Ds,o),Ds.innerHTML=Or,p(s,He,o),p(s,N,o),a(N,xc),a(N,Ya),a(Ya,gc),a(N,Bc),a(N,Fa),a(Fa,Ic),a(N,Lc),p(s,Ce,o),p(s,Os,o),Os.innerHTML=Rr,p(s,De,o),p(s,gn,o),a(gn,Tc),p(s,Oe,o),p(s,Rs,o),Rs.innerHTML=Zr,p(s,Re,o),p(s,Bn,o),a(Bn,Sc),p(s,Ze,o),p(s,In,o),a(In,Ac),p(s,Ne,o),p(s,B,o),a(B,ss),a(ss,Pc),a(ss,Ka),a(Ka,Hc),a(ss,Cc),a(ss,Qa),a(Qa,$a),a($a,Dc),a(B,Oc),a(B,z),a(z,Rc),a(z,Ua),a(Ua,Zc),a(z,Nc),a(z,Ja),a(Ja,Mc),a(z,Wc),a(B,jc),a(B,Xa),a(Xa,Vc),a(B,Gc),a(B,st),a(st,qc),p(s,Me,o),p(s,We,o),p(s,je,o),p(s,ns,o),a(ns,zc),a(ns,Zs),a(Zs,Yc),a(ns,Fc)},p:_k,d(s){s&&n(f),s&&n(os),s&&n(Ms),s&&n(at),s&&n(H),s&&n(tt),s&&n(Ws),s&&n(et),s&&n(js),s&&n(ot),s&&n(Vs),s&&n(pt),s&&n(Gs),s&&n(lt),s&&n(qs),s&&n(ct),s&&n(cs),s&&n(it),s&&n(zs),s&&n(ut),s&&n(Y),s&&n(rt),s&&n(F),s&&n(kt),s&&n(is),s&&n(ft),s&&n(y),s&&n(ht),s&&n(Fs),s&&n(dt),s&&n(Ks),s&&n(yt),s&&n(Qs),s&&n(wt),s&&n(us),s&&n(mt),s&&n(v),s&&n(bt),s&&n(rs),s&&n(vt),s&&n(K),s&&n(Et),s&&n(ks),s&&n(_t),s&&n(C),s&&n(xt),s&&n($s),s&&n(gt),s&&n(Us),s&&n(Bt),s&&n(Js),s&&n(It),s&&n(Xs),s&&n(Lt),s&&n(sn),s&&n(Tt),s&&n(fs),s&&n(St),s&&n(Q),s&&n(At),s&&n(hs),s&&n(Pt),s&&n(d),s&&n(Ht),s&&n(ds),s&&n(Ct),s&&n(w),s&&n(Dt),s&&n(nn),s&&n(Ot),s&&n(D),s&&n(Rt),s&&n(ys),s&&n(Zt),s&&n(E),s&&n(Nt),s&&n(ws),s&&n(Mt),s&&n($),s&&n(Wt),s&&n(an),s&&n(jt),s&&n(U),s&&n(Vt),s&&n(ms),s&&n(Gt),s&&n(tn),s&&n(qt),s&&n(en),s&&n(zt),s&&n(on),s&&n(Yt),s&&n(pn),s&&n(Ft),s&&n(bs),s&&n(Kt),s&&n(m),s&&n(Qt),s&&n(ln),s&&n($t),s&&n(vs),s&&n(Ut),s&&n(cn),s&&n(Jt),s&&n(un),s&&n(Xt),s&&n(rn),s&&n(se),s&&n(Es),s&&n(ne),s&&n(kn),s&&n(ae),s&&n(fn),s&&n(te),s&&n(_s),s&&n(ee),s&&n(hn),s&&n(oe),s&&n(xs),s&&n(pe),s&&n(dn),s&&n(le),s&&n(gs),s&&n(ce),s&&n(J),s&&n(ie),s&&n(yn),s&&n(ue),s&&n(Bs),s&&n(re),s&&n(wn),s&&n(ke),s&&n(Is),s&&n(fe),s&&n(Ls),s&&n(he),s&&n(mn),s&&n(de),s&&n(bn),s&&n(ye),s&&n(Ts),s&&n(we),s&&n(O),s&&n(me),s&&n(Ss),s&&n(be),s&&n(X),s&&n(ve),s&&n(As),s&&n(Ee),s&&n(R),s&&n(_e),s&&n(Ps),s&&n(xe),s&&n(vn),s&&n(ge),s&&n(Z),s&&n(Be),s&&n(Hs),s&&n(Ie),s&&n(En),s&&n(Le),s&&n(Cs),s&&n(Te),s&&n(_n),s&&n(Se),s&&n(xn),s&&n(Ae),s&&n(_),s&&n(Pe),s&&n(Ds),s&&n(He),s&&n(N),s&&n(Ce),s&&n(Os),s&&n(De),s&&n(gn),s&&n(Oe),s&&n(Rs),s&&n(Re),s&&n(Bn),s&&n(Ze),s&&n(In),s&&n(Ne),s&&n(B),s&&n(Me),s&&n(We),s&&n(je),s&&n(ns)}}}function Bk(Ns){let f,b;const G=[Ns[0],ir];let q={$$slots:{default:[gk]},$$scope:{ctx:Ns}};for(let h=0;h<G.length;h+=1)q=Qc(q,G[h]);return f=new xk({props:q}),{c(){dk(f.$$.fragment)},l(h){yk(f.$$.fragment,h)},m(h,S){wk(f,h,S),b=!0},p(h,[S]){const os=S&1?mk(G,[S&1&&lr(h[0]),S&0&&lr(ir)]):{};S&2&&(os.$$scope={dirty:S,ctx:h}),f.$set(os)},i(h){b||(bk(f.$$.fragment,h),b=!0)},o(h){vk(f.$$.fragment,h),b=!1},d(h){Ek(f,h)}}}const ir={title:"Python's most underrated game engine for beginners",author:"Konstantin <mail@vomkonstant.in>",published:"2018-11-08",illustration:'<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 250 250"> <g stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="1.5" stroke-width="5"><path d="M206.993 80.897c23.523 40.434 5.156 89.568-30.854 118.461-28.994 23.264-84.795 29.399-123-11.86-21.456-23.172-25.306-61.89-12.482-94.75M63.288 58.174c5.754-5.595 12.326-10.479 19.704-14.41 29.815-15.888 72.622-16.661 102.123 6.846" stroke-width="13.8889"/><path d="M160.417 131.78c-2.42 19.089-12.17 37.793-26.951 44.106-22.954 9.803-41.983-16.17-41.192-44.54 23.124-5.06 45.738-4.923 69.019-6.907M70.475 66.462c3.711-5.705 10.545-11.87 16.052-13.49 10.17-2.994 22.457 8.114 20.852 18.527-1.265 8.215-6.785 15.053-11.972 21.199-7.552 8.954-15.662 17.558-24.729 25.005-12.764-9.735-34.317-22.902-37.625-39.852-2.826-14.469 4.854-30.304 21.118-24.914 6.911 2.29 12.098 7.996 16.304 13.525zM178.756 57.654C182.51 51.88 189.427 45.641 195 44.002c10.293-3.031 22.729 8.211 21.104 18.748-1.282 8.316-6.865 15.236-12.115 21.457-7.643 9.063-15.853 17.772-25.028 25.307-12.918-9.852-34.73-23.18-38.08-40.332-2.858-14.645 4.913-30.671 21.375-25.216 6.995 2.317 12.243 8.09 16.5 13.688z" stroke-width="13.8889"/></g> </svg>'};function Ik(Ns,f,b){return Ns.$$set=G=>{b(0,f=Qc(Qc({},f),cr(G)))},f=cr(f),[f]}class Hk extends kk{constructor(f){super(),fk(this,f,Ik,Bk,hk,{})}}export{Hk as default,ir as metadata};
