import{S as Ia,i as Ta,s as Pa,D as gs,x as qa,y as La,z as Ma,A as Ra,B as ca,r as ja,p as Ha,C as Oa,P as ua,e as l,t as o,k as c,c as p,a as r,h as i,d as t,m as u,b as E,g as n,F as s,n as Da}from"../../chunks/index-60c65196.js";import{B as Aa}from"../../chunks/BlogPostLayout-49c432fc.js";import"../../chunks/Article-59e33f16.js";import"../../chunks/PageHeading-53856508.js";import"../../chunks/index-cc273379.js";function Ja(J){let h,y,b,S,m,v,_,pt,Ce,C,rt,ae,ct,ut,xe,N,ht,Ie,$,dt,Te,w,ne,mt,ft,oe,wt,vt,ie,kt,yt,le,bt,St,pe,gt,_t,re,Et,Pe,B,Ct,qe,W,xt,Le,x,It,ce,Tt,Pt,Me,z,qt,Re,q,da=`<code class="language-tsx"><span class="token keyword">const</span> SomeComponent<span class="token operator">:</span> <span class="token function-variable function">FunctionComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>children<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SomeKindOfGeneralPurposeDiv</span></span>
    <span class="token attr-name">position</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>absolute<span class="token punctuation">'</span></span>
    <span class="token attr-name">px</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>md<span class="token punctuation">'</span></span> <span class="token comment">// assuming a theme exsists where this is defined</span>
    <span class="token attr-name">py</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>sm<span class="token punctuation">'</span></span> <span class="token comment">// assuming a theme exsists where this is defined</span>
    <span class="token attr-name">top</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>10vh<span class="token punctuation">'</span></span>
    <span class="token attr-name">left</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>20vw<span class="token punctuation">'</span></span>
    <span class="token attr-name">w</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>60vw<span class="token punctuation">'</span></span>
  <span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token punctuation">&#123;</span>children<span class="token punctuation">&#125;</span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SomeKindOfGeneralPurposeDiv</span></span><span class="token punctuation">></span></span><span class="token plain-text">
)
</span></code>`,je,F,Lt,He,L,ma=`<code class="language-tsx"><span class="token keyword">const</span> SomeComponent<span class="token operator">:</span> <span class="token function-variable function">FunctionComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>children<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>
    <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>
      absolute
      px-8
      py-4
      top-[10vh]
      left-[20vh]
      w-[60vw]
    <span class="token punctuation">"</span></span>
  <span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token punctuation">&#123;</span>children<span class="token punctuation">&#125;</span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
)</span></code>`,Oe,K,Mt,De,I,ue,Rt,jt,he,Ht,Ae,G,Ot,Je,U,Dt,Ne,M,fa=`<code class="language-tsx">  m<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>sm<span class="token operator">:</span> <span class="token string">'4px'</span><span class="token punctuation">,</span> md<span class="token operator">:</span> <span class="token string">'8px'</span><span class="token punctuation">,</span> lg<span class="token operator">:</span> <span class="token string">'16px'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code>`,$e,R,At,de,Jt,Be,Q,Nt,We,j,wa=`<code class="language-tsx">className <span class="token operator">=</span> <span class="token string">'sm:m-1 md:m-2 lg:m-4'</span></code>`,ze,V,$t,Fe,X,Bt,Ke,H,va=`<code class="language-tsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">RedOnHover</span></span>
  <span class="token attr-name">css</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>css<span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">
    &amp;:hover &#123;
      background-color: red;
    &#125;
  </span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">&#125;</span></span>
<span class="token punctuation">/></span></span></code>`,Ge,Y,Wt,Ue,O,ka='<code class="language-tsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hover:bg-red-500<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code>',Qe,d,zt,me,Ft,Kt,fe,Gt,Ut,we,Qt,Vt,ve,Xt,Yt,ke,Zt,es,ye,ts,ss,be,as,ns,Se,os,is,Ve,Z,ls,Xe,g,ps,ge,rs,cs,D,us,hs,Ye,T,ds,_e,ms,fs,Ze,A,ya=`<code class="language-scss"><span class="token selector">.image </span><span class="token punctuation">&#123;</span>
  <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">.text:hover </span><span class="token punctuation">&#123;</span>
  <span class="token selector"><span class="token parent important">&amp;</span> ~ .image </span><span class="token punctuation">&#123;</span>
    <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,et,ee,ws,tt,te,vs,st,P,ks,Ee,ys,bs;return{c(){h=l("p"),y=o("A year ago I was teaching web development students about the various approaches to writing and organizing CSS, which is notoriously hard to maintain, in its \u201Cnatural\u201D form. Among the things I was showing was a brief mention of the \u201Catomic CSS\u201D-approach and the fact that TailwindCSS had gained a considerable amount of steam over the last few years. Back then, I was playing it down as a fad, telling them I didn\u2019t understand what all the fuss was about, basically telling them it was unjustified hype."),b=c(),S=l("p"),m=o("Fast forward to this semester, when I taught the same course to another class. My view had changed. I told my students, that I now believe there are good chances TailwindCSS will dominate the space for years to come, similar to how Bootstrap had been doing in the mid-2000s."),v=c(),_=l("h2"),pt=o("Plain CSS is not Tailwind\u2019s competition"),Ce=c(),C=l("p"),rt=o("So what changed? During the months in-between I had realized, that the issues I had with Tailwind were invalid. I was comparing it to plain CSS, even though I had not been writing plain CSS - or even SCSS, Less, etc. - outside of my teaching engagements for quite literally "),ae=l("em"),ct=o("years"),ut=o("."),xe=c(),N=l("h2"),ht=o("What Tailwind is actually up against"),Ie=c(),$=l("p"),dt=o("Joining a ReactJS-legacy project you will quite likely find a stack similar to this:"),Te=c(),w=l("ol"),ne=l("li"),mt=o("TypeScript"),ft=c(),oe=l("li"),wt=o("NextJS"),vt=c(),ie=l("li"),kt=o("React (duh)"),yt=c(),le=l("li"),bt=o("Artifacts of a past Redux integration (\u201Cwe tried to delete it, but when we do it breaks and we don\u2019t know why\u201D)"),St=c(),pe=l("li"),gt=o("styled-components or emotionJS"),_t=c(),re=l("li"),Et=o("styled-system"),Pe=c(),B=l("p"),Ct=o("Let\u2019s focus on the last two points. These have likely been integrated because keeping extra CSS files for every React component quickly becomes unmaintainable with a growing project. So a decision was made to keep the styles within the component files. Eventually, it turned out to be cumbersome to write a stylesheet for every component in your application. To the rescue comes styled-system, which provides you with reusable components using inline styles via props, comprehensive theming functionality and an intriguingly simple way to write responsive styles."),qe=c(),W=l("h2"),xt=o("Performance-gore"),Le=c(),x=l("p"),It=o("None of this comes without a cost. The whole convoluted sentence you just decided not to read, is computed "),ce=l("em"),Tt=o("at runtime"),Pt=o(" and believe me when I tell you, a peek under styled-system\u2019s hood reveals some treacherous caveats."),Me=c(),z=l("p"),qt=o("So what if we could have all of that power, but none of that runtime overhead? Sounds too good to be true? Well, let\u2019s take a look at how we would replace styled-system code with TailwindCSS in this simple example."),Re=c(),q=l("pre"),je=c(),F=l("p"),Lt=o("These are six props that need to be computed at runtime by the browser\u2019s JavaScript interpreter. If we would use Tailwind, this code would be to the same effect:"),He=c(),L=l("pre"),Oe=c(),K=l("p"),Mt=o("As we can see, the ideas at play are the same. In both examples, we use both"),De=c(),I=l("ul"),ue=l("li"),Rt=o("values defined in our theme/config for the padding and"),jt=c(),he=l("li"),Ht=o("arbitrary values that are presumably at this single spot for the positioning and width."),Ae=c(),G=l("h2"),Ot=o("Responsiveness"),Je=c(),U=l("p"),Dt=o("Let\u2019s take a look at responsive styling. I will just show single lines for brevity. This is how you might change a components margin depending on screen size in styled-system."),Ne=c(),M=l("pre"),$e=c(),R=l("p"),At=o("Easy enough, but note that added to everything else discussed above, the passed-in object gets created every time this component re-renders. "),de=l("em"),Jt=o("(Strictly speaking, this is a constant value, that should be moved out of the component entirely, defeating the whole point of readable responsive code.)"),Be=c(),Q=l("p"),Nt=o("On the other hand, doing the same thing in Tailwind looks very similar, but doesn\u2019t require unnecessary computing when running in the browser:"),We=c(),j=l("pre"),ze=c(),V=l("h2"),$t=o("It goes even deeper\u2026"),Fe=c(),X=l("p"),Bt=o("How would you give a component a hover effect in styled-system or styled-components? Inline CSS, right?"),Ke=c(),H=l("pre"),Ge=c(),Y=l("p"),Wt=o("Now if that isn\u2019t some ugly code. Let\u2019s compare this to what tailwind has to offer:"),Ue=c(),O=l("pre"),Qe=c(),d=l("p"),zt=o("The \u201Cbut tailwind is hard to read\u201D argument backfires at this point. Tailwind offers the same principles with most of the other pseudo-selectors and media queries you would normally use: "),me=l("code"),Ft=o("focus"),Kt=o(", "),fe=l("code"),Gt=o("active"),Ut=o(", "),we=l("code"),Qt=o("visited"),Vt=o(", "),ve=l("code"),Xt=o("first"),Yt=o(", "),ke=l("code"),Zt=o("last"),es=o(" and even "),ye=l("code"),ts=o("even"),ss=o(". If you are using animations or transitions, there is even a modifier to handle the "),be=l("code"),as=o("prefers-reduced-motion"),ns=o(" media query with "),Se=l("code"),os=o("motion-reduce:"),is=o("."),Ve=c(),Z=l("h2"),ls=o("\u2026 but it won\u2019t do that"),Xe=c(),g=l("p"),ps=o("Inexplicably, Tailwind does not yet support the "),ge=l("code"),rs=o("pointer"),cs=o(" media query, which I frequently used to enlargen clickable areas for buttons on touch displays. "),D=l("a"),us=o("There seems to be an plugin in development"),hs=o(", but its activity doesn\u2019t stoke confidence."),Ye=c(),T=l("p"),ds=o("Aside from this minor nuisance, there are also natural limits to the atomic CSS approach. The one that had the most impact on me (while coding this very blog, actually) is the fact that there is no way to style an element while "),_e=l("em"),ms=o("another"),fs=o(" element is interacted with. Consider the following SCSS, in which an image gets shown when its sibling text is hovered over."),Ze=c(),A=l("pre"),et=c(),ee=l("p"),ws=o("It is not possible to emulate this behavior with atomic classes alone, in fact, whenever we want to express relationships between certain elements, we have to deviate from the atomic CSS principle, by writing custom classes in our entry CSS file and applying those to our elements."),tt=c(),te=l("h2"),vs=o("Conclusion"),st=c(),P=l("p"),ks=o("Comparing TailwindCSS to plain CSS or even Sass/SCSS, you might question it\u2019s benefit. When did you last write plain CSS though? Modern projects often rely on complex, component-based architectures, for which appropriate styling methods have evolved, and have long reigned supreme in the space. When compared to "),Ee=l("em"),ys=o("these"),bs=o(" styling methods, it becomes clear why TailwindCSS has gained such a strong following over the past years."),this.h()},l(e){h=p(e,"P",{});var a=r(h);y=i(a,"A year ago I was teaching web development students about the various approaches to writing and organizing CSS, which is notoriously hard to maintain, in its \u201Cnatural\u201D form. Among the things I was showing was a brief mention of the \u201Catomic CSS\u201D-approach and the fact that TailwindCSS had gained a considerable amount of steam over the last few years. Back then, I was playing it down as a fad, telling them I didn\u2019t understand what all the fuss was about, basically telling them it was unjustified hype."),a.forEach(t),b=u(e),S=p(e,"P",{});var _s=r(S);m=i(_s,"Fast forward to this semester, when I taught the same course to another class. My view had changed. I told my students, that I now believe there are good chances TailwindCSS will dominate the space for years to come, similar to how Bootstrap had been doing in the mid-2000s."),_s.forEach(t),v=u(e),_=p(e,"H2",{});var Es=r(_);pt=i(Es,"Plain CSS is not Tailwind\u2019s competition"),Es.forEach(t),Ce=u(e),C=p(e,"P",{});var at=r(C);rt=i(at,"So what changed? During the months in-between I had realized, that the issues I had with Tailwind were invalid. I was comparing it to plain CSS, even though I had not been writing plain CSS - or even SCSS, Less, etc. - outside of my teaching engagements for quite literally "),ae=p(at,"EM",{});var Cs=r(ae);ct=i(Cs,"years"),Cs.forEach(t),ut=i(at,"."),at.forEach(t),xe=u(e),N=p(e,"H2",{});var xs=r(N);ht=i(xs,"What Tailwind is actually up against"),xs.forEach(t),Ie=u(e),$=p(e,"P",{});var Is=r($);dt=i(Is,"Joining a ReactJS-legacy project you will quite likely find a stack similar to this:"),Is.forEach(t),Te=u(e),w=p(e,"OL",{});var k=r(w);ne=p(k,"LI",{});var Ts=r(ne);mt=i(Ts,"TypeScript"),Ts.forEach(t),ft=u(k),oe=p(k,"LI",{});var Ps=r(oe);wt=i(Ps,"NextJS"),Ps.forEach(t),vt=u(k),ie=p(k,"LI",{});var qs=r(ie);kt=i(qs,"React (duh)"),qs.forEach(t),yt=u(k),le=p(k,"LI",{});var Ls=r(le);bt=i(Ls,"Artifacts of a past Redux integration (\u201Cwe tried to delete it, but when we do it breaks and we don\u2019t know why\u201D)"),Ls.forEach(t),St=u(k),pe=p(k,"LI",{});var Ms=r(pe);gt=i(Ms,"styled-components or emotionJS"),Ms.forEach(t),_t=u(k),re=p(k,"LI",{});var Rs=r(re);Et=i(Rs,"styled-system"),Rs.forEach(t),k.forEach(t),Pe=u(e),B=p(e,"P",{});var js=r(B);Ct=i(js,"Let\u2019s focus on the last two points. These have likely been integrated because keeping extra CSS files for every React component quickly becomes unmaintainable with a growing project. So a decision was made to keep the styles within the component files. Eventually, it turned out to be cumbersome to write a stylesheet for every component in your application. To the rescue comes styled-system, which provides you with reusable components using inline styles via props, comprehensive theming functionality and an intriguingly simple way to write responsive styles."),js.forEach(t),qe=u(e),W=p(e,"H2",{});var Hs=r(W);xt=i(Hs,"Performance-gore"),Hs.forEach(t),Le=u(e),x=p(e,"P",{});var nt=r(x);It=i(nt,"None of this comes without a cost. The whole convoluted sentence you just decided not to read, is computed "),ce=p(nt,"EM",{});var Os=r(ce);Tt=i(Os,"at runtime"),Os.forEach(t),Pt=i(nt," and believe me when I tell you, a peek under styled-system\u2019s hood reveals some treacherous caveats."),nt.forEach(t),Me=u(e),z=p(e,"P",{});var Ds=r(z);qt=i(Ds,"So what if we could have all of that power, but none of that runtime overhead? Sounds too good to be true? Well, let\u2019s take a look at how we would replace styled-system code with TailwindCSS in this simple example."),Ds.forEach(t),Re=u(e),q=p(e,"PRE",{class:!0});var ba=r(q);ba.forEach(t),je=u(e),F=p(e,"P",{});var As=r(F);Lt=i(As,"These are six props that need to be computed at runtime by the browser\u2019s JavaScript interpreter. If we would use Tailwind, this code would be to the same effect:"),As.forEach(t),He=u(e),L=p(e,"PRE",{class:!0});var Sa=r(L);Sa.forEach(t),Oe=u(e),K=p(e,"P",{});var Js=r(K);Mt=i(Js,"As we can see, the ideas at play are the same. In both examples, we use both"),Js.forEach(t),De=u(e),I=p(e,"UL",{});var ot=r(I);ue=p(ot,"LI",{});var Ns=r(ue);Rt=i(Ns,"values defined in our theme/config for the padding and"),Ns.forEach(t),jt=u(ot),he=p(ot,"LI",{});var $s=r(he);Ht=i($s,"arbitrary values that are presumably at this single spot for the positioning and width."),$s.forEach(t),ot.forEach(t),Ae=u(e),G=p(e,"H2",{});var Bs=r(G);Ot=i(Bs,"Responsiveness"),Bs.forEach(t),Je=u(e),U=p(e,"P",{});var Ws=r(U);Dt=i(Ws,"Let\u2019s take a look at responsive styling. I will just show single lines for brevity. This is how you might change a components margin depending on screen size in styled-system."),Ws.forEach(t),Ne=u(e),M=p(e,"PRE",{class:!0});var ga=r(M);ga.forEach(t),$e=u(e),R=p(e,"P",{});var Ss=r(R);At=i(Ss,"Easy enough, but note that added to everything else discussed above, the passed-in object gets created every time this component re-renders. "),de=p(Ss,"EM",{});var zs=r(de);Jt=i(zs,"(Strictly speaking, this is a constant value, that should be moved out of the component entirely, defeating the whole point of readable responsive code.)"),zs.forEach(t),Ss.forEach(t),Be=u(e),Q=p(e,"P",{});var Fs=r(Q);Nt=i(Fs,"On the other hand, doing the same thing in Tailwind looks very similar, but doesn\u2019t require unnecessary computing when running in the browser:"),Fs.forEach(t),We=u(e),j=p(e,"PRE",{class:!0});var _a=r(j);_a.forEach(t),ze=u(e),V=p(e,"H2",{});var Ks=r(V);$t=i(Ks,"It goes even deeper\u2026"),Ks.forEach(t),Fe=u(e),X=p(e,"P",{});var Gs=r(X);Bt=i(Gs,"How would you give a component a hover effect in styled-system or styled-components? Inline CSS, right?"),Gs.forEach(t),Ke=u(e),H=p(e,"PRE",{class:!0});var Ea=r(H);Ea.forEach(t),Ge=u(e),Y=p(e,"P",{});var Us=r(Y);Wt=i(Us,"Now if that isn\u2019t some ugly code. Let\u2019s compare this to what tailwind has to offer:"),Us.forEach(t),Ue=u(e),O=p(e,"PRE",{class:!0});var Ca=r(O);Ca.forEach(t),Qe=u(e),d=p(e,"P",{});var f=r(d);zt=i(f,"The \u201Cbut tailwind is hard to read\u201D argument backfires at this point. Tailwind offers the same principles with most of the other pseudo-selectors and media queries you would normally use: "),me=p(f,"CODE",{});var Qs=r(me);Ft=i(Qs,"focus"),Qs.forEach(t),Kt=i(f,", "),fe=p(f,"CODE",{});var Vs=r(fe);Gt=i(Vs,"active"),Vs.forEach(t),Ut=i(f,", "),we=p(f,"CODE",{});var Xs=r(we);Qt=i(Xs,"visited"),Xs.forEach(t),Vt=i(f,", "),ve=p(f,"CODE",{});var Ys=r(ve);Xt=i(Ys,"first"),Ys.forEach(t),Yt=i(f,", "),ke=p(f,"CODE",{});var Zs=r(ke);Zt=i(Zs,"last"),Zs.forEach(t),es=i(f," and even "),ye=p(f,"CODE",{});var ea=r(ye);ts=i(ea,"even"),ea.forEach(t),ss=i(f,". If you are using animations or transitions, there is even a modifier to handle the "),be=p(f,"CODE",{});var ta=r(be);as=i(ta,"prefers-reduced-motion"),ta.forEach(t),ns=i(f," media query with "),Se=p(f,"CODE",{});var sa=r(Se);os=i(sa,"motion-reduce:"),sa.forEach(t),is=i(f,"."),f.forEach(t),Ve=u(e),Z=p(e,"H2",{});var aa=r(Z);ls=i(aa,"\u2026 but it won\u2019t do that"),aa.forEach(t),Xe=u(e),g=p(e,"P",{});var se=r(g);ps=i(se,"Inexplicably, Tailwind does not yet support the "),ge=p(se,"CODE",{});var na=r(ge);rs=i(na,"pointer"),na.forEach(t),cs=i(se," media query, which I frequently used to enlargen clickable areas for buttons on touch displays. "),D=p(se,"A",{href:!0,rel:!0});var oa=r(D);us=i(oa,"There seems to be an plugin in development"),oa.forEach(t),hs=i(se,", but its activity doesn\u2019t stoke confidence."),se.forEach(t),Ye=u(e),T=p(e,"P",{});var it=r(T);ds=i(it,"Aside from this minor nuisance, there are also natural limits to the atomic CSS approach. The one that had the most impact on me (while coding this very blog, actually) is the fact that there is no way to style an element while "),_e=p(it,"EM",{});var ia=r(_e);ms=i(ia,"another"),ia.forEach(t),fs=i(it," element is interacted with. Consider the following SCSS, in which an image gets shown when its sibling text is hovered over."),it.forEach(t),Ze=u(e),A=p(e,"PRE",{class:!0});var xa=r(A);xa.forEach(t),et=u(e),ee=p(e,"P",{});var la=r(ee);ws=i(la,"It is not possible to emulate this behavior with atomic classes alone, in fact, whenever we want to express relationships between certain elements, we have to deviate from the atomic CSS principle, by writing custom classes in our entry CSS file and applying those to our elements."),la.forEach(t),tt=u(e),te=p(e,"H2",{});var pa=r(te);vs=i(pa,"Conclusion"),pa.forEach(t),st=u(e),P=p(e,"P",{});var lt=r(P);ks=i(lt,"Comparing TailwindCSS to plain CSS or even Sass/SCSS, you might question it\u2019s benefit. When did you last write plain CSS though? Modern projects often rely on complex, component-based architectures, for which appropriate styling methods have evolved, and have long reigned supreme in the space. When compared to "),Ee=p(lt,"EM",{});var ra=r(Ee);ys=i(ra,"these"),ra.forEach(t),bs=i(lt," styling methods, it becomes clear why TailwindCSS has gained such a strong following over the past years."),lt.forEach(t),this.h()},h(){E(q,"class","language-tsx"),E(L,"class","language-tsx"),E(M,"class","language-tsx"),E(j,"class","language-tsx"),E(H,"class","language-tsx"),E(O,"class","language-tsx"),E(D,"href","https://github.com/ShiftLimits/tailwindcss-interaction-media"),E(D,"rel","nofollow"),E(A,"class","language-scss")},m(e,a){n(e,h,a),s(h,y),n(e,b,a),n(e,S,a),s(S,m),n(e,v,a),n(e,_,a),s(_,pt),n(e,Ce,a),n(e,C,a),s(C,rt),s(C,ae),s(ae,ct),s(C,ut),n(e,xe,a),n(e,N,a),s(N,ht),n(e,Ie,a),n(e,$,a),s($,dt),n(e,Te,a),n(e,w,a),s(w,ne),s(ne,mt),s(w,ft),s(w,oe),s(oe,wt),s(w,vt),s(w,ie),s(ie,kt),s(w,yt),s(w,le),s(le,bt),s(w,St),s(w,pe),s(pe,gt),s(w,_t),s(w,re),s(re,Et),n(e,Pe,a),n(e,B,a),s(B,Ct),n(e,qe,a),n(e,W,a),s(W,xt),n(e,Le,a),n(e,x,a),s(x,It),s(x,ce),s(ce,Tt),s(x,Pt),n(e,Me,a),n(e,z,a),s(z,qt),n(e,Re,a),n(e,q,a),q.innerHTML=da,n(e,je,a),n(e,F,a),s(F,Lt),n(e,He,a),n(e,L,a),L.innerHTML=ma,n(e,Oe,a),n(e,K,a),s(K,Mt),n(e,De,a),n(e,I,a),s(I,ue),s(ue,Rt),s(I,jt),s(I,he),s(he,Ht),n(e,Ae,a),n(e,G,a),s(G,Ot),n(e,Je,a),n(e,U,a),s(U,Dt),n(e,Ne,a),n(e,M,a),M.innerHTML=fa,n(e,$e,a),n(e,R,a),s(R,At),s(R,de),s(de,Jt),n(e,Be,a),n(e,Q,a),s(Q,Nt),n(e,We,a),n(e,j,a),j.innerHTML=wa,n(e,ze,a),n(e,V,a),s(V,$t),n(e,Fe,a),n(e,X,a),s(X,Bt),n(e,Ke,a),n(e,H,a),H.innerHTML=va,n(e,Ge,a),n(e,Y,a),s(Y,Wt),n(e,Ue,a),n(e,O,a),O.innerHTML=ka,n(e,Qe,a),n(e,d,a),s(d,zt),s(d,me),s(me,Ft),s(d,Kt),s(d,fe),s(fe,Gt),s(d,Ut),s(d,we),s(we,Qt),s(d,Vt),s(d,ve),s(ve,Xt),s(d,Yt),s(d,ke),s(ke,Zt),s(d,es),s(d,ye),s(ye,ts),s(d,ss),s(d,be),s(be,as),s(d,ns),s(d,Se),s(Se,os),s(d,is),n(e,Ve,a),n(e,Z,a),s(Z,ls),n(e,Xe,a),n(e,g,a),s(g,ps),s(g,ge),s(ge,rs),s(g,cs),s(g,D),s(D,us),s(g,hs),n(e,Ye,a),n(e,T,a),s(T,ds),s(T,_e),s(_e,ms),s(T,fs),n(e,Ze,a),n(e,A,a),A.innerHTML=ya,n(e,et,a),n(e,ee,a),s(ee,ws),n(e,tt,a),n(e,te,a),s(te,vs),n(e,st,a),n(e,P,a),s(P,ks),s(P,Ee),s(Ee,ys),s(P,bs)},p:Da,d(e){e&&t(h),e&&t(b),e&&t(S),e&&t(v),e&&t(_),e&&t(Ce),e&&t(C),e&&t(xe),e&&t(N),e&&t(Ie),e&&t($),e&&t(Te),e&&t(w),e&&t(Pe),e&&t(B),e&&t(qe),e&&t(W),e&&t(Le),e&&t(x),e&&t(Me),e&&t(z),e&&t(Re),e&&t(q),e&&t(je),e&&t(F),e&&t(He),e&&t(L),e&&t(Oe),e&&t(K),e&&t(De),e&&t(I),e&&t(Ae),e&&t(G),e&&t(Je),e&&t(U),e&&t(Ne),e&&t(M),e&&t($e),e&&t(R),e&&t(Be),e&&t(Q),e&&t(We),e&&t(j),e&&t(ze),e&&t(V),e&&t(Fe),e&&t(X),e&&t(Ke),e&&t(H),e&&t(Ge),e&&t(Y),e&&t(Ue),e&&t(O),e&&t(Qe),e&&t(d),e&&t(Ve),e&&t(Z),e&&t(Xe),e&&t(g),e&&t(Ye),e&&t(T),e&&t(Ze),e&&t(A),e&&t(et),e&&t(ee),e&&t(tt),e&&t(te),e&&t(st),e&&t(P)}}}function Na(J){let h,y;const b=[J[0],ha];let S={$$slots:{default:[Ja]},$$scope:{ctx:J}};for(let m=0;m<b.length;m+=1)S=gs(S,b[m]);return h=new Aa({props:S}),{c(){qa(h.$$.fragment)},l(m){La(h.$$.fragment,m)},m(m,v){Ma(h,m,v),y=!0},p(m,[v]){const _=v&1?Ra(b,[v&1&&ca(m[0]),v&0&&ca(ha)]):{};v&2&&(_.$$scope={dirty:v,ctx:m}),h.$set(_)},i(m){y||(ja(h.$$.fragment,m),y=!0)},o(m){Ha(h.$$.fragment,m),y=!1},d(m){Oa(h,m)}}}const ha={title:"Comparing TailwindCSS with plain CSS is plain wrong",author:"Konstantin <mail@vomkonstant.in>",published:"2022-05-09",illustration:'<svg viewBox="0 0 250 250" fill="none" xmlns="http://www.w3.org/2000/svg"> <g stroke-width="10" stroke-miterlimit="1.5" stroke-linecap="round" stroke-linejoin="round"> <path d="M11.27 89.844c5.437-7.04 11.214-12.512 18.943-16.929 55.62-31.782 87.677 36.25 135.593 50.062 30.354 8.75 73.913-3.376 72.299-42.482" stroke="currentcolor" stroke-width="20.491799999999998"/> <path d="M46.136 139.77c25.21-18.149 44.616-.906 65.137 14.145 26.56 19.479 59 38.254 91.556 19.935" stroke="currentColor" stroke-width="20.491799999999998"/> </g> </svg>'};function $a(J,h,y){return J.$$set=b=>{y(0,h=gs(gs({},h),ua(b)))},h=ua(h),[h]}class Ga extends Ia{constructor(h){super(),Ta(this,h,$a,Na,Pa,{})}}export{Ga as default,ha as metadata};
